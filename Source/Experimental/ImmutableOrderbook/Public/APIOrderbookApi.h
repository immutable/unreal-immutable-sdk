/**
 * TS SDK API
 * running ts sdk as an api
 *
 * OpenAPI spec version: 1.0.0
 * Contact: contact@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "APIBaseModel.h"

namespace ImmutableOrderbook
{

class IMMUTABLEORDERBOOK_API APIOrderbookApi
{
public:
	APIOrderbookApi();
	~APIOrderbookApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class CancelOrdersRequest;
	class CancelOrdersResponse;
	class CancelOrdersOnChainRequest;
	class CancelOrdersOnChainResponse;
	class CreateListingRequest;
	class CreateListingResponse;
	class FulfillOrderRequest;
	class FulfillOrderResponse;
	class PrepareListingRequest;
	class PrepareListingResponse;
	class PrepareOrderCancellationsRequest;
	class PrepareOrderCancellationsResponse;
	class TokenBalanceRequest;
	class TokenBalanceResponse;
	
    DECLARE_DELEGATE_OneParam(FCancelOrdersDelegate, const CancelOrdersResponse&);
    DECLARE_DELEGATE_OneParam(FCancelOrdersOnChainDelegate, const CancelOrdersOnChainResponse&);
    DECLARE_DELEGATE_OneParam(FCreateListingDelegate, const CreateListingResponse&);
    DECLARE_DELEGATE_OneParam(FFulfillOrderDelegate, const FulfillOrderResponse&);
    DECLARE_DELEGATE_OneParam(FPrepareListingDelegate, const PrepareListingResponse&);
    DECLARE_DELEGATE_OneParam(FPrepareOrderCancellationsDelegate, const PrepareOrderCancellationsResponse&);
    DECLARE_DELEGATE_OneParam(FTokenBalanceDelegate, const TokenBalanceResponse&);
    
    FHttpRequestPtr CancelOrders(const CancelOrdersRequest& Request, const FCancelOrdersDelegate& Delegate = FCancelOrdersDelegate()) const;
    FHttpRequestPtr CancelOrdersOnChain(const CancelOrdersOnChainRequest& Request, const FCancelOrdersOnChainDelegate& Delegate = FCancelOrdersOnChainDelegate()) const;
    FHttpRequestPtr CreateListing(const CreateListingRequest& Request, const FCreateListingDelegate& Delegate = FCreateListingDelegate()) const;
    FHttpRequestPtr FulfillOrder(const FulfillOrderRequest& Request, const FFulfillOrderDelegate& Delegate = FFulfillOrderDelegate()) const;
    FHttpRequestPtr PrepareListing(const PrepareListingRequest& Request, const FPrepareListingDelegate& Delegate = FPrepareListingDelegate()) const;
    FHttpRequestPtr PrepareOrderCancellations(const PrepareOrderCancellationsRequest& Request, const FPrepareOrderCancellationsDelegate& Delegate = FPrepareOrderCancellationsDelegate()) const;
    FHttpRequestPtr TokenBalance(const TokenBalanceRequest& Request, const FTokenBalanceDelegate& Delegate = FTokenBalanceDelegate()) const;
    
private:
    void OnCancelOrdersResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCancelOrdersDelegate Delegate) const;
    void OnCancelOrdersOnChainResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCancelOrdersOnChainDelegate Delegate) const;
    void OnCreateListingResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateListingDelegate Delegate) const;
    void OnFulfillOrderResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FFulfillOrderDelegate Delegate) const;
    void OnPrepareListingResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPrepareListingDelegate Delegate) const;
    void OnPrepareOrderCancellationsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPrepareOrderCancellationsDelegate Delegate) const;
    void OnTokenBalanceResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FTokenBalanceDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
