/**
 * Immutable zkEVM API
 * Immutable Multi Rollup API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "APICollection.h"

#include "ImmutablezkEVMAPIModule.h"
#include "APIHelpers.h"

#include "Templates/SharedPointer.h"

namespace ImmutablezkEVMAPI
{

void APICollection::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("chain")); WriteJsonValue(Writer, Chain);
	if (Name.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("name")); WriteJsonValue(Writer, Name.GetValue());
	}
	if (Symbol.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("symbol")); WriteJsonValue(Writer, Symbol.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("contract_type")); WriteJsonValue(Writer, ContractType);
	Writer->WriteIdentifierPrefix(TEXT("contract_address")); WriteJsonValue(Writer, ContractAddress);
	if (Description.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("description")); WriteJsonValue(Writer, Description.GetValue());
	}
	if (Image.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("image")); WriteJsonValue(Writer, Image.GetValue());
	}
	if (ExternalLink.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("external_link")); WriteJsonValue(Writer, ExternalLink.GetValue());
	}
	if (ContractUri.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("contract_uri")); WriteJsonValue(Writer, ContractUri.GetValue());
	}
	if (BaseUri.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("base_uri")); WriteJsonValue(Writer, BaseUri.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("verification_status")); WriteJsonValue(Writer, VerificationStatus);
	Writer->WriteIdentifierPrefix(TEXT("indexed_at")); WriteJsonValue(Writer, IndexedAt);
	Writer->WriteIdentifierPrefix(TEXT("updated_at")); WriteJsonValue(Writer, UpdatedAt);
	if (MetadataSyncedAt.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("metadata_synced_at")); WriteJsonValue(Writer, MetadataSyncedAt.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool APICollection::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("chain"), Chain);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("name"), Name);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("symbol"), Symbol);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("contract_type"), ContractType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("contract_address"), ContractAddress);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("description"), Description);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("image"), Image);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("external_link"), ExternalLink);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("contract_uri"), ContractUri);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("base_uri"), BaseUri);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("verification_status"), VerificationStatus);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("indexed_at"), IndexedAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("updated_at"), UpdatedAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("metadata_synced_at"), MetadataSyncedAt);

	return ParseSuccess;
}

}
