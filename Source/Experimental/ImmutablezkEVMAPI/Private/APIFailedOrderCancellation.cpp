/**
 * Immutable zkEVM API
 * Immutable Multi Rollup API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "APIFailedOrderCancellation.h"

#include "ImmutablezkEVMAPIModule.h"
#include "APIHelpers.h"

#include "Templates/SharedPointer.h"

namespace ImmutablezkEVMAPI
{

inline FString ToString(const APIFailedOrderCancellation::ReasonCodeEnum& Value)
{
	switch (Value)
	{
	case APIFailedOrderCancellation::ReasonCodeEnum::Filled:
		return TEXT("FILLED");
	}

	UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Invalid APIFailedOrderCancellation::ReasonCodeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString APIFailedOrderCancellation::EnumToString(const APIFailedOrderCancellation::ReasonCodeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, APIFailedOrderCancellation::ReasonCodeEnum& Value)
{
	static TMap<FString, APIFailedOrderCancellation::ReasonCodeEnum> StringToEnum = { 
		{ TEXT("FILLED"), APIFailedOrderCancellation::ReasonCodeEnum::Filled }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool APIFailedOrderCancellation::EnumFromString(const FString& EnumAsString, APIFailedOrderCancellation::ReasonCodeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const APIFailedOrderCancellation::ReasonCodeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, APIFailedOrderCancellation::ReasonCodeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void APIFailedOrderCancellation::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("order")); WriteJsonValue(Writer, Order);
	Writer->WriteIdentifierPrefix(TEXT("reason_code")); WriteJsonValue(Writer, ReasonCode);
	Writer->WriteObjectEnd();
}

bool APIFailedOrderCancellation::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("order"), Order);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("reason_code"), ReasonCode);

	return ParseSuccess;
}

}
