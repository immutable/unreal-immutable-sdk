/**
 * Immutable zkEVM API
 * Immutable Multi Rollup API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "APINFTContractType.h"

#include "ImmutablezkEVMAPIModule.h"
#include "APIHelpers.h"

#include "Templates/SharedPointer.h"

namespace ImmutablezkEVMAPI
{

inline FString ToString(const APINFTContractType::Values& Value)
{
	switch (Value)
	{
	case APINFTContractType::Values::ERC721:
		return TEXT("ERC721");
	case APINFTContractType::Values::ERC1155:
		return TEXT("ERC1155");
	}

	UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Invalid APINFTContractType::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString APINFTContractType::EnumToString(const APINFTContractType::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, APINFTContractType::Values& Value)
{
	static TMap<FString, APINFTContractType::Values> StringToEnum = { 
		{ TEXT("ERC721"), APINFTContractType::Values::ERC721 },
		{ TEXT("ERC1155"), APINFTContractType::Values::ERC1155 }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool APINFTContractType::EnumFromString(const FString& EnumAsString, APINFTContractType::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const APINFTContractType::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, APINFTContractType::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void APINFTContractType::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool APINFTContractType::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
