/**
 * Immutable zkEVM API
 * Immutable Multi Rollup API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "APINFTQuoteResult.h"

#include "ImmutablezkEVMAPIModule.h"
#include "APIHelpers.h"

#include "Templates/SharedPointer.h"

namespace ImmutablezkEVMAPI
{

void APINFTQuoteResult::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("chain")); WriteJsonValue(Writer, Chain);
	Writer->WriteIdentifierPrefix(TEXT("token_id")); WriteJsonValue(Writer, TokenId);
	Writer->WriteIdentifierPrefix(TEXT("market_stack")); WriteJsonValue(Writer, MarketStack);
	Writer->WriteIdentifierPrefix(TEXT("market_nft")); WriteJsonValue(Writer, MarketNft);
	Writer->WriteIdentifierPrefix(TEXT("market_collection")); WriteJsonValue(Writer, MarketCollection);
	Writer->WriteObjectEnd();
}

bool APINFTQuoteResult::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("chain"), Chain);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("token_id"), TokenId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("market_stack"), MarketStack);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("market_nft"), MarketNft);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("market_collection"), MarketCollection);

	return ParseSuccess;
}

}
