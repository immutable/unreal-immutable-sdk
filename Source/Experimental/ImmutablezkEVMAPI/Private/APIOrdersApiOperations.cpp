/**
 * Immutable zkEVM API
 * Immutable Multi Rollup API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "APIOrdersApiOperations.h"

#include "ImmutablezkEVMAPIModule.h"
#include "APIHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace ImmutablezkEVMAPI
{

FString APIOrdersApi::CancelOrdersRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("chain_name"), FStringFormatArg(ToUrlString(ChainName)) } };

	FString Path = FString::Format(TEXT("/v1/chains/{chain_name}/orders/cancel"), PathParams);

	return Path;
}

void APIOrdersApi::CancelOrdersRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, APICancelOrdersRequestBody);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Body parameter (APICancelOrdersRequestBody) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Body parameter (APICancelOrdersRequestBody) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void APIOrdersApi::CancelOrdersResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Orders cancellation response."));
		break;
	case 400:
		SetResponseString(TEXT("Bad Request (400)"));
		break;
	case 401:
		SetResponseString(TEXT("Unauthorised Request (401)"));
		break;
	case 404:
		SetResponseString(TEXT("The specified resource was not found (404)"));
		break;
	case 429:
		SetResponseString(TEXT("Too Many Requests (429)"));
		break;
	case 500:
		SetResponseString(TEXT("Internal Server Error (500)"));
		break;
	case 501:
		SetResponseString(TEXT("Not Implemented Error (501)"));
		break;
	}
}

bool APIOrdersApi::CancelOrdersResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString APIOrdersApi::CreateBidRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("chain_name"), FStringFormatArg(ToUrlString(ChainName)) } };

	FString Path = FString::Format(TEXT("/v1/chains/{chain_name}/orders/bids"), PathParams);

	return Path;
}

void APIOrdersApi::CreateBidRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, APICreateBidRequestBody);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Body parameter (APICreateBidRequestBody) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Body parameter (APICreateBidRequestBody) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void APIOrdersApi::CreateBidResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 201:
		SetResponseString(TEXT("Created response."));
		break;
	case 400:
		SetResponseString(TEXT("Bad Request (400)"));
		break;
	case 404:
		SetResponseString(TEXT("The specified resource was not found (404)"));
		break;
	case 500:
		SetResponseString(TEXT("Internal Server Error (500)"));
		break;
	case 501:
		SetResponseString(TEXT("Not Implemented Error (501)"));
		break;
	}
}

bool APIOrdersApi::CreateBidResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString APIOrdersApi::CreateCollectionBidRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("chain_name"), FStringFormatArg(ToUrlString(ChainName)) } };

	FString Path = FString::Format(TEXT("/v1/chains/{chain_name}/orders/collection-bids"), PathParams);

	return Path;
}

void APIOrdersApi::CreateCollectionBidRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, APICreateCollectionBidRequestBody);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Body parameter (APICreateCollectionBidRequestBody) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Body parameter (APICreateCollectionBidRequestBody) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void APIOrdersApi::CreateCollectionBidResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 201:
		SetResponseString(TEXT("Created response."));
		break;
	case 400:
		SetResponseString(TEXT("Bad Request (400)"));
		break;
	case 404:
		SetResponseString(TEXT("The specified resource was not found (404)"));
		break;
	case 500:
		SetResponseString(TEXT("Internal Server Error (500)"));
		break;
	case 501:
		SetResponseString(TEXT("Not Implemented Error (501)"));
		break;
	}
}

bool APIOrdersApi::CreateCollectionBidResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString APIOrdersApi::CreateListingRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("chain_name"), FStringFormatArg(ToUrlString(ChainName)) } };

	FString Path = FString::Format(TEXT("/v1/chains/{chain_name}/orders/listings"), PathParams);

	return Path;
}

void APIOrdersApi::CreateListingRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, APICreateListingRequestBody);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Body parameter (APICreateListingRequestBody) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Body parameter (APICreateListingRequestBody) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void APIOrdersApi::CreateListingResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 201:
		SetResponseString(TEXT("Created response."));
		break;
	case 400:
		SetResponseString(TEXT("Bad Request (400)"));
		break;
	case 404:
		SetResponseString(TEXT("The specified resource was not found (404)"));
		break;
	case 500:
		SetResponseString(TEXT("Internal Server Error (500)"));
		break;
	}
}

bool APIOrdersApi::CreateListingResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString APIOrdersApi::FulfillmentDataRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("chain_name"), FStringFormatArg(ToUrlString(ChainName)) } };

	FString Path = FString::Format(TEXT("/v1/chains/{chain_name}/orders/fulfillment-data"), PathParams);

	return Path;
}

void APIOrdersApi::FulfillmentDataRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, APIFulfillmentDataRequest);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Body parameter (APIFulfillmentDataRequest) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Body parameter (APIFulfillmentDataRequest) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void APIOrdersApi::FulfillmentDataResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Successful response"));
		break;
	case 400:
		SetResponseString(TEXT("Bad Request (400)"));
		break;
	case 404:
		SetResponseString(TEXT("The specified resource was not found (404)"));
		break;
	case 500:
		SetResponseString(TEXT("Internal Server Error (500)"));
		break;
	}
}

bool APIOrdersApi::FulfillmentDataResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString APIOrdersApi::GetBidRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("chain_name"), FStringFormatArg(ToUrlString(ChainName)) },
	{ TEXT("bid_id"), FStringFormatArg(ToUrlString(BidId)) } };

	FString Path = FString::Format(TEXT("/v1/chains/{chain_name}/orders/bids/{bid_id}"), PathParams);

	return Path;
}

void APIOrdersApi::GetBidRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void APIOrdersApi::GetBidResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK response."));
		break;
	case 400:
		SetResponseString(TEXT("Bad Request (400)"));
		break;
	case 404:
		SetResponseString(TEXT("The specified resource was not found (404)"));
		break;
	case 500:
		SetResponseString(TEXT("Internal Server Error (500)"));
		break;
	}
}

bool APIOrdersApi::GetBidResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString APIOrdersApi::GetCollectionBidRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("chain_name"), FStringFormatArg(ToUrlString(ChainName)) },
	{ TEXT("collection_bid_id"), FStringFormatArg(ToUrlString(CollectionBidId)) } };

	FString Path = FString::Format(TEXT("/v1/chains/{chain_name}/orders/collection-bids/{collection_bid_id}"), PathParams);

	return Path;
}

void APIOrdersApi::GetCollectionBidRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void APIOrdersApi::GetCollectionBidResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK response."));
		break;
	case 400:
		SetResponseString(TEXT("Bad Request (400)"));
		break;
	case 404:
		SetResponseString(TEXT("The specified resource was not found (404)"));
		break;
	case 500:
		SetResponseString(TEXT("Internal Server Error (500)"));
		break;
	}
}

bool APIOrdersApi::GetCollectionBidResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString APIOrdersApi::GetListingRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("chain_name"), FStringFormatArg(ToUrlString(ChainName)) },
	{ TEXT("listing_id"), FStringFormatArg(ToUrlString(ListingId)) } };

	FString Path = FString::Format(TEXT("/v1/chains/{chain_name}/orders/listings/{listing_id}"), PathParams);

	return Path;
}

void APIOrdersApi::GetListingRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void APIOrdersApi::GetListingResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK response."));
		break;
	case 400:
		SetResponseString(TEXT("Bad Request (400)"));
		break;
	case 404:
		SetResponseString(TEXT("The specified resource was not found (404)"));
		break;
	case 500:
		SetResponseString(TEXT("Internal Server Error (500)"));
		break;
	}
}

bool APIOrdersApi::GetListingResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString APIOrdersApi::GetTradeRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("chain_name"), FStringFormatArg(ToUrlString(ChainName)) },
	{ TEXT("trade_id"), FStringFormatArg(ToUrlString(TradeId)) } };

	FString Path = FString::Format(TEXT("/v1/chains/{chain_name}/trades/{trade_id}"), PathParams);

	return Path;
}

void APIOrdersApi::GetTradeRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void APIOrdersApi::GetTradeResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK response."));
		break;
	case 400:
		SetResponseString(TEXT("Bad Request (400)"));
		break;
	case 404:
		SetResponseString(TEXT("The specified resource was not found (404)"));
		break;
	case 500:
		SetResponseString(TEXT("Internal Server Error (500)"));
		break;
	}
}

bool APIOrdersApi::GetTradeResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const APIOrdersApi::ListBidsRequest::SortByEnum& Value)
{
	switch (Value)
	{
	case APIOrdersApi::ListBidsRequest::SortByEnum::CreatedAt:
		return TEXT("created_at");
	case APIOrdersApi::ListBidsRequest::SortByEnum::UpdatedAt:
		return TEXT("updated_at");
	case APIOrdersApi::ListBidsRequest::SortByEnum::SellItemAmount:
		return TEXT("sell_item_amount");
	}

	UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Invalid APIOrdersApi::ListBidsRequest::SortByEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString APIOrdersApi::ListBidsRequest::EnumToString(const APIOrdersApi::ListBidsRequest::SortByEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, APIOrdersApi::ListBidsRequest::SortByEnum& Value)
{
	static TMap<FString, APIOrdersApi::ListBidsRequest::SortByEnum> StringToEnum = { 
		{ TEXT("created_at"), APIOrdersApi::ListBidsRequest::SortByEnum::CreatedAt },
		{ TEXT("updated_at"), APIOrdersApi::ListBidsRequest::SortByEnum::UpdatedAt },
		{ TEXT("sell_item_amount"), APIOrdersApi::ListBidsRequest::SortByEnum::SellItemAmount }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool APIOrdersApi::ListBidsRequest::EnumFromString(const FString& EnumAsString, APIOrdersApi::ListBidsRequest::SortByEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const APIOrdersApi::ListBidsRequest::SortByEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, APIOrdersApi::ListBidsRequest::SortByEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const APIOrdersApi::ListBidsRequest::SortDirectionEnum& Value)
{
	switch (Value)
	{
	case APIOrdersApi::ListBidsRequest::SortDirectionEnum::Asc:
		return TEXT("asc");
	case APIOrdersApi::ListBidsRequest::SortDirectionEnum::Desc:
		return TEXT("desc");
	}

	UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Invalid APIOrdersApi::ListBidsRequest::SortDirectionEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString APIOrdersApi::ListBidsRequest::EnumToString(const APIOrdersApi::ListBidsRequest::SortDirectionEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, APIOrdersApi::ListBidsRequest::SortDirectionEnum& Value)
{
	static TMap<FString, APIOrdersApi::ListBidsRequest::SortDirectionEnum> StringToEnum = { 
		{ TEXT("asc"), APIOrdersApi::ListBidsRequest::SortDirectionEnum::Asc },
		{ TEXT("desc"), APIOrdersApi::ListBidsRequest::SortDirectionEnum::Desc }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool APIOrdersApi::ListBidsRequest::EnumFromString(const FString& EnumAsString, APIOrdersApi::ListBidsRequest::SortDirectionEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const APIOrdersApi::ListBidsRequest::SortDirectionEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, APIOrdersApi::ListBidsRequest::SortDirectionEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString APIOrdersApi::ListBidsRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("chain_name"), FStringFormatArg(ToUrlString(ChainName)) } };

	FString Path = FString::Format(TEXT("/v1/chains/{chain_name}/orders/bids"), PathParams);

	TArray<FString> QueryParams;
	if(Status.IsSet())
	{
		QueryParams.Add(FString(TEXT("status=")) + ToUrlString(Status.GetValue()));
	}
	if(BuyItemContractAddress.IsSet())
	{
		QueryParams.Add(FString(TEXT("buy_item_contract_address=")) + ToUrlString(BuyItemContractAddress.GetValue()));
	}
	if(SellItemContractAddress.IsSet())
	{
		QueryParams.Add(FString(TEXT("sell_item_contract_address=")) + ToUrlString(SellItemContractAddress.GetValue()));
	}
	if(AccountAddress.IsSet())
	{
		QueryParams.Add(FString(TEXT("account_address=")) + ToUrlString(AccountAddress.GetValue()));
	}
	if(BuyItemMetadataId.IsSet())
	{
		QueryParams.Add(FString(TEXT("buy_item_metadata_id=")) + ToUrlString(BuyItemMetadataId.GetValue()));
	}
	if(BuyItemTokenId.IsSet())
	{
		QueryParams.Add(FString(TEXT("buy_item_token_id=")) + ToUrlString(BuyItemTokenId.GetValue()));
	}
	if(FromUpdatedAt.IsSet())
	{
		QueryParams.Add(FString(TEXT("from_updated_at=")) + ToUrlString(FromUpdatedAt.GetValue()));
	}
	if(PageSize.IsSet())
	{
		QueryParams.Add(FString(TEXT("page_size=")) + ToUrlString(PageSize.GetValue()));
	}
	if(SortBy.IsSet())
	{
		QueryParams.Add(FString(TEXT("sort_by=")) + ToUrlString(SortBy.GetValue()));
	}
	if(SortDirection.IsSet())
	{
		QueryParams.Add(FString(TEXT("sort_direction=")) + ToUrlString(SortDirection.GetValue()));
	}
	if(PageCursor.IsSet())
	{
		QueryParams.Add(FString(TEXT("page_cursor=")) + ToUrlString(PageCursor.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void APIOrdersApi::ListBidsRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void APIOrdersApi::ListBidsResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK response."));
		break;
	case 400:
		SetResponseString(TEXT("Bad Request (400)"));
		break;
	case 404:
		SetResponseString(TEXT("The specified resource was not found (404)"));
		break;
	case 500:
		SetResponseString(TEXT("Internal Server Error (500)"));
		break;
	}
}

bool APIOrdersApi::ListBidsResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const APIOrdersApi::ListCollectionBidsRequest::SortByEnum& Value)
{
	switch (Value)
	{
	case APIOrdersApi::ListCollectionBidsRequest::SortByEnum::CreatedAt:
		return TEXT("created_at");
	case APIOrdersApi::ListCollectionBidsRequest::SortByEnum::UpdatedAt:
		return TEXT("updated_at");
	case APIOrdersApi::ListCollectionBidsRequest::SortByEnum::SellItemAmount:
		return TEXT("sell_item_amount");
	}

	UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Invalid APIOrdersApi::ListCollectionBidsRequest::SortByEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString APIOrdersApi::ListCollectionBidsRequest::EnumToString(const APIOrdersApi::ListCollectionBidsRequest::SortByEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, APIOrdersApi::ListCollectionBidsRequest::SortByEnum& Value)
{
	static TMap<FString, APIOrdersApi::ListCollectionBidsRequest::SortByEnum> StringToEnum = { 
		{ TEXT("created_at"), APIOrdersApi::ListCollectionBidsRequest::SortByEnum::CreatedAt },
		{ TEXT("updated_at"), APIOrdersApi::ListCollectionBidsRequest::SortByEnum::UpdatedAt },
		{ TEXT("sell_item_amount"), APIOrdersApi::ListCollectionBidsRequest::SortByEnum::SellItemAmount }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool APIOrdersApi::ListCollectionBidsRequest::EnumFromString(const FString& EnumAsString, APIOrdersApi::ListCollectionBidsRequest::SortByEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const APIOrdersApi::ListCollectionBidsRequest::SortByEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, APIOrdersApi::ListCollectionBidsRequest::SortByEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const APIOrdersApi::ListCollectionBidsRequest::SortDirectionEnum& Value)
{
	switch (Value)
	{
	case APIOrdersApi::ListCollectionBidsRequest::SortDirectionEnum::Asc:
		return TEXT("asc");
	case APIOrdersApi::ListCollectionBidsRequest::SortDirectionEnum::Desc:
		return TEXT("desc");
	}

	UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Invalid APIOrdersApi::ListCollectionBidsRequest::SortDirectionEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString APIOrdersApi::ListCollectionBidsRequest::EnumToString(const APIOrdersApi::ListCollectionBidsRequest::SortDirectionEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, APIOrdersApi::ListCollectionBidsRequest::SortDirectionEnum& Value)
{
	static TMap<FString, APIOrdersApi::ListCollectionBidsRequest::SortDirectionEnum> StringToEnum = { 
		{ TEXT("asc"), APIOrdersApi::ListCollectionBidsRequest::SortDirectionEnum::Asc },
		{ TEXT("desc"), APIOrdersApi::ListCollectionBidsRequest::SortDirectionEnum::Desc }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool APIOrdersApi::ListCollectionBidsRequest::EnumFromString(const FString& EnumAsString, APIOrdersApi::ListCollectionBidsRequest::SortDirectionEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const APIOrdersApi::ListCollectionBidsRequest::SortDirectionEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, APIOrdersApi::ListCollectionBidsRequest::SortDirectionEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString APIOrdersApi::ListCollectionBidsRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("chain_name"), FStringFormatArg(ToUrlString(ChainName)) } };

	FString Path = FString::Format(TEXT("/v1/chains/{chain_name}/orders/collection-bids"), PathParams);

	TArray<FString> QueryParams;
	if(Status.IsSet())
	{
		QueryParams.Add(FString(TEXT("status=")) + ToUrlString(Status.GetValue()));
	}
	if(BuyItemContractAddress.IsSet())
	{
		QueryParams.Add(FString(TEXT("buy_item_contract_address=")) + ToUrlString(BuyItemContractAddress.GetValue()));
	}
	if(SellItemContractAddress.IsSet())
	{
		QueryParams.Add(FString(TEXT("sell_item_contract_address=")) + ToUrlString(SellItemContractAddress.GetValue()));
	}
	if(AccountAddress.IsSet())
	{
		QueryParams.Add(FString(TEXT("account_address=")) + ToUrlString(AccountAddress.GetValue()));
	}
	if(FromUpdatedAt.IsSet())
	{
		QueryParams.Add(FString(TEXT("from_updated_at=")) + ToUrlString(FromUpdatedAt.GetValue()));
	}
	if(PageSize.IsSet())
	{
		QueryParams.Add(FString(TEXT("page_size=")) + ToUrlString(PageSize.GetValue()));
	}
	if(SortBy.IsSet())
	{
		QueryParams.Add(FString(TEXT("sort_by=")) + ToUrlString(SortBy.GetValue()));
	}
	if(SortDirection.IsSet())
	{
		QueryParams.Add(FString(TEXT("sort_direction=")) + ToUrlString(SortDirection.GetValue()));
	}
	if(PageCursor.IsSet())
	{
		QueryParams.Add(FString(TEXT("page_cursor=")) + ToUrlString(PageCursor.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void APIOrdersApi::ListCollectionBidsRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void APIOrdersApi::ListCollectionBidsResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK response."));
		break;
	case 400:
		SetResponseString(TEXT("Bad Request (400)"));
		break;
	case 404:
		SetResponseString(TEXT("The specified resource was not found (404)"));
		break;
	case 500:
		SetResponseString(TEXT("Internal Server Error (500)"));
		break;
	}
}

bool APIOrdersApi::ListCollectionBidsResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const APIOrdersApi::ListListingsRequest::BuyItemTypeEnum& Value)
{
	switch (Value)
	{
	case APIOrdersApi::ListListingsRequest::BuyItemTypeEnum::Native:
		return TEXT("NATIVE");
	case APIOrdersApi::ListListingsRequest::BuyItemTypeEnum::ERC20:
		return TEXT("ERC20");
	}

	UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Invalid APIOrdersApi::ListListingsRequest::BuyItemTypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString APIOrdersApi::ListListingsRequest::EnumToString(const APIOrdersApi::ListListingsRequest::BuyItemTypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, APIOrdersApi::ListListingsRequest::BuyItemTypeEnum& Value)
{
	static TMap<FString, APIOrdersApi::ListListingsRequest::BuyItemTypeEnum> StringToEnum = { 
		{ TEXT("NATIVE"), APIOrdersApi::ListListingsRequest::BuyItemTypeEnum::Native },
		{ TEXT("ERC20"), APIOrdersApi::ListListingsRequest::BuyItemTypeEnum::ERC20 }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool APIOrdersApi::ListListingsRequest::EnumFromString(const FString& EnumAsString, APIOrdersApi::ListListingsRequest::BuyItemTypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const APIOrdersApi::ListListingsRequest::BuyItemTypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, APIOrdersApi::ListListingsRequest::BuyItemTypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const APIOrdersApi::ListListingsRequest::SortByEnum& Value)
{
	switch (Value)
	{
	case APIOrdersApi::ListListingsRequest::SortByEnum::CreatedAt:
		return TEXT("created_at");
	case APIOrdersApi::ListListingsRequest::SortByEnum::UpdatedAt:
		return TEXT("updated_at");
	case APIOrdersApi::ListListingsRequest::SortByEnum::BuyItemAmount:
		return TEXT("buy_item_amount");
	}

	UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Invalid APIOrdersApi::ListListingsRequest::SortByEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString APIOrdersApi::ListListingsRequest::EnumToString(const APIOrdersApi::ListListingsRequest::SortByEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, APIOrdersApi::ListListingsRequest::SortByEnum& Value)
{
	static TMap<FString, APIOrdersApi::ListListingsRequest::SortByEnum> StringToEnum = { 
		{ TEXT("created_at"), APIOrdersApi::ListListingsRequest::SortByEnum::CreatedAt },
		{ TEXT("updated_at"), APIOrdersApi::ListListingsRequest::SortByEnum::UpdatedAt },
		{ TEXT("buy_item_amount"), APIOrdersApi::ListListingsRequest::SortByEnum::BuyItemAmount }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool APIOrdersApi::ListListingsRequest::EnumFromString(const FString& EnumAsString, APIOrdersApi::ListListingsRequest::SortByEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const APIOrdersApi::ListListingsRequest::SortByEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, APIOrdersApi::ListListingsRequest::SortByEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const APIOrdersApi::ListListingsRequest::SortDirectionEnum& Value)
{
	switch (Value)
	{
	case APIOrdersApi::ListListingsRequest::SortDirectionEnum::Asc:
		return TEXT("asc");
	case APIOrdersApi::ListListingsRequest::SortDirectionEnum::Desc:
		return TEXT("desc");
	}

	UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Invalid APIOrdersApi::ListListingsRequest::SortDirectionEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString APIOrdersApi::ListListingsRequest::EnumToString(const APIOrdersApi::ListListingsRequest::SortDirectionEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, APIOrdersApi::ListListingsRequest::SortDirectionEnum& Value)
{
	static TMap<FString, APIOrdersApi::ListListingsRequest::SortDirectionEnum> StringToEnum = { 
		{ TEXT("asc"), APIOrdersApi::ListListingsRequest::SortDirectionEnum::Asc },
		{ TEXT("desc"), APIOrdersApi::ListListingsRequest::SortDirectionEnum::Desc }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool APIOrdersApi::ListListingsRequest::EnumFromString(const FString& EnumAsString, APIOrdersApi::ListListingsRequest::SortDirectionEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const APIOrdersApi::ListListingsRequest::SortDirectionEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, APIOrdersApi::ListListingsRequest::SortDirectionEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString APIOrdersApi::ListListingsRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("chain_name"), FStringFormatArg(ToUrlString(ChainName)) } };

	FString Path = FString::Format(TEXT("/v1/chains/{chain_name}/orders/listings"), PathParams);

	TArray<FString> QueryParams;
	if(Status.IsSet())
	{
		QueryParams.Add(FString(TEXT("status=")) + ToUrlString(Status.GetValue()));
	}
	if(SellItemContractAddress.IsSet())
	{
		QueryParams.Add(FString(TEXT("sell_item_contract_address=")) + ToUrlString(SellItemContractAddress.GetValue()));
	}
	if(BuyItemType.IsSet())
	{
		QueryParams.Add(FString(TEXT("buy_item_type=")) + ToUrlString(BuyItemType.GetValue()));
	}
	if(BuyItemContractAddress.IsSet())
	{
		QueryParams.Add(FString(TEXT("buy_item_contract_address=")) + ToUrlString(BuyItemContractAddress.GetValue()));
	}
	if(AccountAddress.IsSet())
	{
		QueryParams.Add(FString(TEXT("account_address=")) + ToUrlString(AccountAddress.GetValue()));
	}
	if(SellItemMetadataId.IsSet())
	{
		QueryParams.Add(FString(TEXT("sell_item_metadata_id=")) + ToUrlString(SellItemMetadataId.GetValue()));
	}
	if(SellItemTokenId.IsSet())
	{
		QueryParams.Add(FString(TEXT("sell_item_token_id=")) + ToUrlString(SellItemTokenId.GetValue()));
	}
	if(FromUpdatedAt.IsSet())
	{
		QueryParams.Add(FString(TEXT("from_updated_at=")) + ToUrlString(FromUpdatedAt.GetValue()));
	}
	if(PageSize.IsSet())
	{
		QueryParams.Add(FString(TEXT("page_size=")) + ToUrlString(PageSize.GetValue()));
	}
	if(SortBy.IsSet())
	{
		QueryParams.Add(FString(TEXT("sort_by=")) + ToUrlString(SortBy.GetValue()));
	}
	if(SortDirection.IsSet())
	{
		QueryParams.Add(FString(TEXT("sort_direction=")) + ToUrlString(SortDirection.GetValue()));
	}
	if(PageCursor.IsSet())
	{
		QueryParams.Add(FString(TEXT("page_cursor=")) + ToUrlString(PageCursor.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void APIOrdersApi::ListListingsRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void APIOrdersApi::ListListingsResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK response."));
		break;
	case 400:
		SetResponseString(TEXT("Bad Request (400)"));
		break;
	case 404:
		SetResponseString(TEXT("The specified resource was not found (404)"));
		break;
	case 500:
		SetResponseString(TEXT("Internal Server Error (500)"));
		break;
	}
}

bool APIOrdersApi::ListListingsResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const APIOrdersApi::ListTradesRequest::SortByEnum& Value)
{
	switch (Value)
	{
	case APIOrdersApi::ListTradesRequest::SortByEnum::IndexedAt:
		return TEXT("indexed_at");
	}

	UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Invalid APIOrdersApi::ListTradesRequest::SortByEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString APIOrdersApi::ListTradesRequest::EnumToString(const APIOrdersApi::ListTradesRequest::SortByEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, APIOrdersApi::ListTradesRequest::SortByEnum& Value)
{
	static TMap<FString, APIOrdersApi::ListTradesRequest::SortByEnum> StringToEnum = { 
		{ TEXT("indexed_at"), APIOrdersApi::ListTradesRequest::SortByEnum::IndexedAt }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool APIOrdersApi::ListTradesRequest::EnumFromString(const FString& EnumAsString, APIOrdersApi::ListTradesRequest::SortByEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const APIOrdersApi::ListTradesRequest::SortByEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, APIOrdersApi::ListTradesRequest::SortByEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const APIOrdersApi::ListTradesRequest::SortDirectionEnum& Value)
{
	switch (Value)
	{
	case APIOrdersApi::ListTradesRequest::SortDirectionEnum::Asc:
		return TEXT("asc");
	case APIOrdersApi::ListTradesRequest::SortDirectionEnum::Desc:
		return TEXT("desc");
	}

	UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Invalid APIOrdersApi::ListTradesRequest::SortDirectionEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString APIOrdersApi::ListTradesRequest::EnumToString(const APIOrdersApi::ListTradesRequest::SortDirectionEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, APIOrdersApi::ListTradesRequest::SortDirectionEnum& Value)
{
	static TMap<FString, APIOrdersApi::ListTradesRequest::SortDirectionEnum> StringToEnum = { 
		{ TEXT("asc"), APIOrdersApi::ListTradesRequest::SortDirectionEnum::Asc },
		{ TEXT("desc"), APIOrdersApi::ListTradesRequest::SortDirectionEnum::Desc }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool APIOrdersApi::ListTradesRequest::EnumFromString(const FString& EnumAsString, APIOrdersApi::ListTradesRequest::SortDirectionEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const APIOrdersApi::ListTradesRequest::SortDirectionEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, APIOrdersApi::ListTradesRequest::SortDirectionEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString APIOrdersApi::ListTradesRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("chain_name"), FStringFormatArg(ToUrlString(ChainName)) } };

	FString Path = FString::Format(TEXT("/v1/chains/{chain_name}/trades"), PathParams);

	TArray<FString> QueryParams;
	if(AccountAddress.IsSet())
	{
		QueryParams.Add(FString(TEXT("account_address=")) + ToUrlString(AccountAddress.GetValue()));
	}
	if(SellItemContractAddress.IsSet())
	{
		QueryParams.Add(FString(TEXT("sell_item_contract_address=")) + ToUrlString(SellItemContractAddress.GetValue()));
	}
	if(FromIndexedAt.IsSet())
	{
		QueryParams.Add(FString(TEXT("from_indexed_at=")) + ToUrlString(FromIndexedAt.GetValue()));
	}
	if(PageSize.IsSet())
	{
		QueryParams.Add(FString(TEXT("page_size=")) + ToUrlString(PageSize.GetValue()));
	}
	if(SortBy.IsSet())
	{
		QueryParams.Add(FString(TEXT("sort_by=")) + ToUrlString(SortBy.GetValue()));
	}
	if(SortDirection.IsSet())
	{
		QueryParams.Add(FString(TEXT("sort_direction=")) + ToUrlString(SortDirection.GetValue()));
	}
	if(PageCursor.IsSet())
	{
		QueryParams.Add(FString(TEXT("page_cursor=")) + ToUrlString(PageCursor.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void APIOrdersApi::ListTradesRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void APIOrdersApi::ListTradesResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("OK response."));
		break;
	case 400:
		SetResponseString(TEXT("Bad Request (400)"));
		break;
	case 404:
		SetResponseString(TEXT("The specified resource was not found (404)"));
		break;
	case 500:
		SetResponseString(TEXT("Internal Server Error (500)"));
		break;
	}
}

bool APIOrdersApi::ListTradesResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

}
