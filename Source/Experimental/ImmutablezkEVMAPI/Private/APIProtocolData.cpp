/**
 * Immutable zkEVM API
 * Immutable Multi Rollup API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "APIProtocolData.h"

#include "ImmutablezkEVMAPIModule.h"
#include "APIHelpers.h"

#include "Templates/SharedPointer.h"

namespace ImmutablezkEVMAPI
{

inline FString ToString(const APIProtocolData::OrderTypeEnum& Value)
{
	switch (Value)
	{
	case APIProtocolData::OrderTypeEnum::FullRestricted:
		return TEXT("FULL_RESTRICTED");
	case APIProtocolData::OrderTypeEnum::PartialRestricted:
		return TEXT("PARTIAL_RESTRICTED");
	}

	UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Invalid APIProtocolData::OrderTypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString APIProtocolData::EnumToString(const APIProtocolData::OrderTypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, APIProtocolData::OrderTypeEnum& Value)
{
	static TMap<FString, APIProtocolData::OrderTypeEnum> StringToEnum = { 
		{ TEXT("FULL_RESTRICTED"), APIProtocolData::OrderTypeEnum::FullRestricted },
		{ TEXT("PARTIAL_RESTRICTED"), APIProtocolData::OrderTypeEnum::PartialRestricted }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool APIProtocolData::EnumFromString(const FString& EnumAsString, APIProtocolData::OrderTypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const APIProtocolData::OrderTypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, APIProtocolData::OrderTypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void APIProtocolData::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("order_type")); WriteJsonValue(Writer, OrderType);
	Writer->WriteIdentifierPrefix(TEXT("counter")); WriteJsonValue(Writer, Counter);
	Writer->WriteIdentifierPrefix(TEXT("zone_address")); WriteJsonValue(Writer, ZoneAddress);
	Writer->WriteIdentifierPrefix(TEXT("seaport_address")); WriteJsonValue(Writer, SeaportAddress);
	Writer->WriteIdentifierPrefix(TEXT("seaport_version")); WriteJsonValue(Writer, SeaportVersion);
	Writer->WriteObjectEnd();
}

bool APIProtocolData::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("order_type"), OrderType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("counter"), Counter);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("zone_address"), ZoneAddress);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("seaport_address"), SeaportAddress);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("seaport_version"), SeaportVersion);

	return ParseSuccess;
}

}
