/**
 * Immutable zkEVM API
 * Immutable Multi Rollup API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "APIBaseModel.h"
#include "APICollectionsApi.h"

#include "APIAPIError400.h"
#include "APIAPIError401.h"
#include "APIAPIError403.h"
#include "APIAPIError404.h"
#include "APIAPIError500.h"
#include "APIAssetVerificationStatus.h"
#include "APIGetCollectionResult.h"
#include "APIListCollectionsResult.h"
#include "APIRefreshCollectionMetadataRequest.h"
#include "APIRefreshCollectionMetadataResult.h"

namespace ImmutablezkEVMAPI
{

/* Get collection by contract address
 *
 * Get collection by contract address
*/
class IMMUTABLEZKEVMAPI_API APICollectionsApi::GetCollectionRequest : public Request
{
public:
    virtual ~GetCollectionRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The address contract */
	FString ContractAddress;
	/* The name of chain */
	FString ChainName;
};

class IMMUTABLEZKEVMAPI_API APICollectionsApi::GetCollectionResponse : public Response
{
public:
    virtual ~GetCollectionResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    APIGetCollectionResult Content;
};

/* List all collections
 *
 * List all collections
*/
class IMMUTABLEZKEVMAPI_API APICollectionsApi::ListCollectionsRequest : public Request
{
public:
    virtual ~ListCollectionsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The name of chain */
	FString ChainName;
	/* List of contract addresses to filter by */
	TOptional<TArray<FString>> ContractAddress;
	/* List of verification status to filter by */
	TOptional<TArray<APIAssetVerificationStatus>> VerificationStatus;
	/* Datetime to use as the oldest updated timestamp */
	TOptional<FDateTime> FromUpdatedAt;
	/* Encoded page cursor to retrieve previous or next page. Use the value returned in the response. */
	TOptional<FString> PageCursor;
	/* Maximum number of items to return */
	TOptional<int32> PageSize;
};

class IMMUTABLEZKEVMAPI_API APICollectionsApi::ListCollectionsResponse : public Response
{
public:
    virtual ~ListCollectionsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    APIListCollectionsResult Content;
};

/* List collections by NFT owner
 *
 * List collections by NFT owner account address
*/
class IMMUTABLEZKEVMAPI_API APICollectionsApi::ListCollectionsByNFTOwnerRequest : public Request
{
public:
    virtual ~ListCollectionsByNFTOwnerRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Account address */
	FString AccountAddress;
	/* The name of chain */
	FString ChainName;
	/* Encoded page cursor to retrieve previous or next page. Use the value returned in the response. */
	TOptional<FString> PageCursor;
	/* Maximum number of items to return */
	TOptional<int32> PageSize;
};

class IMMUTABLEZKEVMAPI_API APICollectionsApi::ListCollectionsByNFTOwnerResponse : public Response
{
public:
    virtual ~ListCollectionsByNFTOwnerResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    APIListCollectionsResult Content;
};

/* Refresh collection metadata
 *
 * Refresh collection metadata
*/
class IMMUTABLEZKEVMAPI_API APICollectionsApi::RefreshCollectionMetadataRequest : public Request
{
public:
    virtual ~RefreshCollectionMetadataRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The address contract */
	FString ContractAddress;
	/* The name of chain */
	FString ChainName;
	/* The request body */
	APIRefreshCollectionMetadataRequest APIRefreshCollectionMetadataRequest;
};

class IMMUTABLEZKEVMAPI_API APICollectionsApi::RefreshCollectionMetadataResponse : public Response
{
public:
    virtual ~RefreshCollectionMetadataResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    APIRefreshCollectionMetadataResult Content;
};

}
