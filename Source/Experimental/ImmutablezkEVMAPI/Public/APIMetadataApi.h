/**
 * Immutable zkEVM API
 * Immutable Multi Rollup API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "APIBaseModel.h"

namespace ImmutablezkEVMAPI
{

class IMMUTABLEZKEVMAPI_API APIMetadataApi
{
public:
	APIMetadataApi();
	~APIMetadataApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class GetMetadataRequest;
	class GetMetadataResponse;
	class ListMetadataRequest;
	class ListMetadataResponse;
	class ListMetadataForChainRequest;
	class ListMetadataForChainResponse;
	class ListStacksRequest;
	class ListStacksResponse;
	class RefreshMetadataByIDRequest;
	class RefreshMetadataByIDResponse;
	class RefreshNFTMetadataByTokenIDRequest;
	class RefreshNFTMetadataByTokenIDResponse;
	
    DECLARE_DELEGATE_OneParam(FGetMetadataDelegate, const GetMetadataResponse&);
    DECLARE_DELEGATE_OneParam(FListMetadataDelegate, const ListMetadataResponse&);
    DECLARE_DELEGATE_OneParam(FListMetadataForChainDelegate, const ListMetadataForChainResponse&);
    DECLARE_DELEGATE_OneParam(FListStacksDelegate, const ListStacksResponse&);
    DECLARE_DELEGATE_OneParam(FRefreshMetadataByIDDelegate, const RefreshMetadataByIDResponse&);
    DECLARE_DELEGATE_OneParam(FRefreshNFTMetadataByTokenIDDelegate, const RefreshNFTMetadataByTokenIDResponse&);
    
    FHttpRequestPtr GetMetadata(const GetMetadataRequest& Request, const FGetMetadataDelegate& Delegate = FGetMetadataDelegate()) const;
    FHttpRequestPtr ListMetadata(const ListMetadataRequest& Request, const FListMetadataDelegate& Delegate = FListMetadataDelegate()) const;
    FHttpRequestPtr ListMetadataForChain(const ListMetadataForChainRequest& Request, const FListMetadataForChainDelegate& Delegate = FListMetadataForChainDelegate()) const;
    FHttpRequestPtr ListStacks(const ListStacksRequest& Request, const FListStacksDelegate& Delegate = FListStacksDelegate()) const;
    FHttpRequestPtr RefreshMetadataByID(const RefreshMetadataByIDRequest& Request, const FRefreshMetadataByIDDelegate& Delegate = FRefreshMetadataByIDDelegate()) const;
    FHttpRequestPtr RefreshNFTMetadataByTokenID(const RefreshNFTMetadataByTokenIDRequest& Request, const FRefreshNFTMetadataByTokenIDDelegate& Delegate = FRefreshNFTMetadataByTokenIDDelegate()) const;
    
private:
    void OnGetMetadataResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetMetadataDelegate Delegate) const;
    void OnListMetadataResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListMetadataDelegate Delegate) const;
    void OnListMetadataForChainResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListMetadataForChainDelegate Delegate) const;
    void OnListStacksResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListStacksDelegate Delegate) const;
    void OnRefreshMetadataByIDResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRefreshMetadataByIDDelegate Delegate) const;
    void OnRefreshNFTMetadataByTokenIDResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRefreshNFTMetadataByTokenIDDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
