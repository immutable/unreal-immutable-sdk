/**
 * Immutable zkEVM API
 * Immutable Multi Rollup API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "APIBaseModel.h"
#include "APINftsApi.h"

#include "APIAPIError400.h"
#include "APIAPIError401.h"
#include "APIAPIError403.h"
#include "APIAPIError404.h"
#include "APIAPIError409.h"
#include "APIAPIError429.h"
#include "APIAPIError500.h"
#include "APICreateMintRequestRequest.h"
#include "APICreateMintRequestResult.h"
#include "APIGetNFTResult.h"
#include "APIListMintRequestsResult.h"
#include "APIListNFTsByOwnerResult.h"
#include "APIListNFTsResult.h"
#include "APIMintRequestStatus.h"

namespace ImmutablezkEVMAPI
{

/* Mint NFTs
 *
 * Create a mint request to mint a set of NFTs for a given collection
*/
class IMMUTABLEZKEVMAPI_API APINftsApi::CreateMintRequestRequest : public Request
{
public:
    virtual ~CreateMintRequestRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The address of contract */
	FString ContractAddress;
	/* The name of chain */
	FString ChainName;
	/* Create Mint Request Body */
	APICreateMintRequestRequest APICreateMintRequestRequest;
};

class IMMUTABLEZKEVMAPI_API APINftsApi::CreateMintRequestResponse : public Response
{
public:
    virtual ~CreateMintRequestResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    APICreateMintRequestResult Content;
};

/* Get mint request by reference ID
 *
 * Retrieve the status of a mint request identified by its reference_id
*/
class IMMUTABLEZKEVMAPI_API APINftsApi::GetMintRequestRequest : public Request
{
public:
    virtual ~GetMintRequestRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The address of contract */
	FString ContractAddress;
	/* The name of chain */
	FString ChainName;
	/* The id of the mint request */
	FString ReferenceId;
};

class IMMUTABLEZKEVMAPI_API APINftsApi::GetMintRequestResponse : public Response
{
public:
    virtual ~GetMintRequestResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    APIListMintRequestsResult Content;
};

/* Get NFT by token ID
 *
 * Get NFT by token ID
*/
class IMMUTABLEZKEVMAPI_API APINftsApi::GetNFTRequest : public Request
{
public:
    virtual ~GetNFTRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The address of NFT contract */
	FString ContractAddress;
	/* An `uint256` token id as string */
	FString TokenId;
	/* The name of chain */
	FString ChainName;
};

class IMMUTABLEZKEVMAPI_API APINftsApi::GetNFTResponse : public Response
{
public:
    virtual ~GetNFTResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    APIGetNFTResult Content;
};

/* List all NFTs
 *
 * List all NFTs on a chain
*/
class IMMUTABLEZKEVMAPI_API APINftsApi::ListAllNFTsRequest : public Request
{
public:
    virtual ~ListAllNFTsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The name of chain */
	FString ChainName;
	/* Datetime to use as the oldest updated timestamp */
	TOptional<FDateTime> FromUpdatedAt;
	/* Encoded page cursor to retrieve previous or next page. Use the value returned in the response. */
	TOptional<FString> PageCursor;
	/* Maximum number of items to return */
	TOptional<int32> PageSize;
};

class IMMUTABLEZKEVMAPI_API APINftsApi::ListAllNFTsResponse : public Response
{
public:
    virtual ~ListAllNFTsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    APIListNFTsResult Content;
};

/* List mint requests
 *
 * Retrieve the status of all mints for a given contract address
*/
class IMMUTABLEZKEVMAPI_API APINftsApi::ListMintRequestsRequest : public Request
{
public:
    virtual ~ListMintRequestsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The address of contract */
	FString ContractAddress;
	/* The name of chain */
	FString ChainName;
	/* Encoded page cursor to retrieve previous or next page. Use the value returned in the response. */
	TOptional<FString> PageCursor;
	/* Maximum number of items to return */
	TOptional<int32> PageSize;
	/* The status of the mint request */
	TOptional<APIMintRequestStatus> Status;
};

class IMMUTABLEZKEVMAPI_API APINftsApi::ListMintRequestsResponse : public Response
{
public:
    virtual ~ListMintRequestsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    APIListMintRequestsResult Content;
};

/* List NFTs by contract address
 *
 * List NFTs by contract address
*/
class IMMUTABLEZKEVMAPI_API APINftsApi::ListNFTsRequest : public Request
{
public:
    virtual ~ListNFTsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Contract address */
	FString ContractAddress;
	/* The name of chain */
	FString ChainName;
	/* List of token IDs to filter by */
	TOptional<TArray<FString>> TokenId;
	/* Datetime to use as the oldest updated timestamp */
	TOptional<FDateTime> FromUpdatedAt;
	/* Encoded page cursor to retrieve previous or next page. Use the value returned in the response. */
	TOptional<FString> PageCursor;
	/* Maximum number of items to return */
	TOptional<int32> PageSize;
};

class IMMUTABLEZKEVMAPI_API APINftsApi::ListNFTsResponse : public Response
{
public:
    virtual ~ListNFTsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    APIListNFTsResult Content;
};

/* List NFTs by account address
 *
 * List NFTs by account address
*/
class IMMUTABLEZKEVMAPI_API APINftsApi::ListNFTsByAccountAddressRequest : public Request
{
public:
    virtual ~ListNFTsByAccountAddressRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Account address */
	FString AccountAddress;
	/* The name of chain */
	FString ChainName;
	/* The address of contract */
	TOptional<FString> ContractAddress;
	/* List of token IDs to filter by */
	TOptional<TArray<FString>> TokenId;
	/* Datetime to use as the oldest updated timestamp */
	TOptional<FDateTime> FromUpdatedAt;
	/* Encoded page cursor to retrieve previous or next page. Use the value returned in the response. */
	TOptional<FString> PageCursor;
	/* Maximum number of items to return */
	TOptional<int32> PageSize;
};

class IMMUTABLEZKEVMAPI_API APINftsApi::ListNFTsByAccountAddressResponse : public Response
{
public:
    virtual ~ListNFTsByAccountAddressResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    APIListNFTsByOwnerResult Content;
};

}
