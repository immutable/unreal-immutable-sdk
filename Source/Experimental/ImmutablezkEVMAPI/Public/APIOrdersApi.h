/**
 * Immutable zkEVM API
 * Immutable Multi Rollup API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "APIBaseModel.h"

namespace ImmutablezkEVMAPI
{

class IMMUTABLEZKEVMAPI_API APIOrdersApi
{
public:
	APIOrdersApi();
	~APIOrdersApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class CancelOrdersRequest;
	class CancelOrdersResponse;
	class CreateBidRequest;
	class CreateBidResponse;
	class CreateCollectionBidRequest;
	class CreateCollectionBidResponse;
	class CreateListingRequest;
	class CreateListingResponse;
	class FulfillmentDataRequest;
	class FulfillmentDataResponse;
	class GetBidRequest;
	class GetBidResponse;
	class GetCollectionBidRequest;
	class GetCollectionBidResponse;
	class GetListingRequest;
	class GetListingResponse;
	class GetTradeRequest;
	class GetTradeResponse;
	class ListBidsRequest;
	class ListBidsResponse;
	class ListCollectionBidsRequest;
	class ListCollectionBidsResponse;
	class ListListingsRequest;
	class ListListingsResponse;
	class ListTradesRequest;
	class ListTradesResponse;
	
    DECLARE_DELEGATE_OneParam(FCancelOrdersDelegate, const CancelOrdersResponse&);
    DECLARE_DELEGATE_OneParam(FCreateBidDelegate, const CreateBidResponse&);
    DECLARE_DELEGATE_OneParam(FCreateCollectionBidDelegate, const CreateCollectionBidResponse&);
    DECLARE_DELEGATE_OneParam(FCreateListingDelegate, const CreateListingResponse&);
    DECLARE_DELEGATE_OneParam(FFulfillmentDataDelegate, const FulfillmentDataResponse&);
    DECLARE_DELEGATE_OneParam(FGetBidDelegate, const GetBidResponse&);
    DECLARE_DELEGATE_OneParam(FGetCollectionBidDelegate, const GetCollectionBidResponse&);
    DECLARE_DELEGATE_OneParam(FGetListingDelegate, const GetListingResponse&);
    DECLARE_DELEGATE_OneParam(FGetTradeDelegate, const GetTradeResponse&);
    DECLARE_DELEGATE_OneParam(FListBidsDelegate, const ListBidsResponse&);
    DECLARE_DELEGATE_OneParam(FListCollectionBidsDelegate, const ListCollectionBidsResponse&);
    DECLARE_DELEGATE_OneParam(FListListingsDelegate, const ListListingsResponse&);
    DECLARE_DELEGATE_OneParam(FListTradesDelegate, const ListTradesResponse&);
    
    FHttpRequestPtr CancelOrders(const CancelOrdersRequest& Request, const FCancelOrdersDelegate& Delegate = FCancelOrdersDelegate()) const;
    FHttpRequestPtr CreateBid(const CreateBidRequest& Request, const FCreateBidDelegate& Delegate = FCreateBidDelegate()) const;
    FHttpRequestPtr CreateCollectionBid(const CreateCollectionBidRequest& Request, const FCreateCollectionBidDelegate& Delegate = FCreateCollectionBidDelegate()) const;
    FHttpRequestPtr CreateListing(const CreateListingRequest& Request, const FCreateListingDelegate& Delegate = FCreateListingDelegate()) const;
    FHttpRequestPtr FulfillmentData(const FulfillmentDataRequest& Request, const FFulfillmentDataDelegate& Delegate = FFulfillmentDataDelegate()) const;
    FHttpRequestPtr GetBid(const GetBidRequest& Request, const FGetBidDelegate& Delegate = FGetBidDelegate()) const;
    FHttpRequestPtr GetCollectionBid(const GetCollectionBidRequest& Request, const FGetCollectionBidDelegate& Delegate = FGetCollectionBidDelegate()) const;
    FHttpRequestPtr GetListing(const GetListingRequest& Request, const FGetListingDelegate& Delegate = FGetListingDelegate()) const;
    FHttpRequestPtr GetTrade(const GetTradeRequest& Request, const FGetTradeDelegate& Delegate = FGetTradeDelegate()) const;
    FHttpRequestPtr ListBids(const ListBidsRequest& Request, const FListBidsDelegate& Delegate = FListBidsDelegate()) const;
    FHttpRequestPtr ListCollectionBids(const ListCollectionBidsRequest& Request, const FListCollectionBidsDelegate& Delegate = FListCollectionBidsDelegate()) const;
    FHttpRequestPtr ListListings(const ListListingsRequest& Request, const FListListingsDelegate& Delegate = FListListingsDelegate()) const;
    FHttpRequestPtr ListTrades(const ListTradesRequest& Request, const FListTradesDelegate& Delegate = FListTradesDelegate()) const;
    
private:
    void OnCancelOrdersResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCancelOrdersDelegate Delegate) const;
    void OnCreateBidResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateBidDelegate Delegate) const;
    void OnCreateCollectionBidResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateCollectionBidDelegate Delegate) const;
    void OnCreateListingResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateListingDelegate Delegate) const;
    void OnFulfillmentDataResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FFulfillmentDataDelegate Delegate) const;
    void OnGetBidResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetBidDelegate Delegate) const;
    void OnGetCollectionBidResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetCollectionBidDelegate Delegate) const;
    void OnGetListingResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetListingDelegate Delegate) const;
    void OnGetTradeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetTradeDelegate Delegate) const;
    void OnListBidsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListBidsDelegate Delegate) const;
    void OnListCollectionBidsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListCollectionBidsDelegate Delegate) const;
    void OnListListingsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListListingsDelegate Delegate) const;
    void OnListTradesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListTradesDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
