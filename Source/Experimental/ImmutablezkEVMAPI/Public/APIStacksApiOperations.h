/**
 * Immutable zkEVM API
 * Immutable Multi Rollup API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "APIBaseModel.h"
#include "APIStacksApi.h"

#include "APIAPIError400.h"
#include "APIAPIError401.h"
#include "APIAPIError403.h"
#include "APIAPIError404.h"
#include "APIAPIError429.h"
#include "APIAPIError500.h"
#include "APISearchNFTsResult.h"
#include "APISearchStacksResult.h"
#include "APIStackBundle.h"

namespace ImmutablezkEVMAPI
{

/* Experimental: List NFT stacks by stack_id
 *
 * ![Experimental](https://img.shields.io/badge/status-experimental-yellow) NFT stacks
*/
class IMMUTABLEZKEVMAPI_API APIStacksApi::ListStacksRequest : public Request
{
public:
    virtual ~ListStacksRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The name of chain */
	FString ChainName;
	/* List of stack_id to filter by */
	TArray<FGuid> StackId;
};

class IMMUTABLEZKEVMAPI_API APIStacksApi::ListStacksResponse : public Response
{
public:
    virtual ~ListStacksResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    TArray<APIStackBundle> Content;
};

/* Experimental: Search NFTs
 *
 * ![Experimental](https://img.shields.io/badge/status-experimental-yellow) Search NFTs
*/
class IMMUTABLEZKEVMAPI_API APIStacksApi::SearchNFTsRequest : public Request
{
public:
    virtual ~SearchNFTsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The name of chain */
	FString ChainName;
	/* List of contract addresses to filter by */
	TArray<FString> ContractAddress;
	/* Account address to filter by */
	TOptional<FString> AccountAddress;
	/* Filters NFTs that belong to any of these stacks */
	TOptional<TArray<FGuid>> StackId;
	/* Whether the listings should include only the owner created listings */
	TOptional<bool> OnlyIncludeOwnerListings;
	/* Number of results to return per page */
	TOptional<int32> PageSize;
	/* Encoded page cursor to retrieve previous or next page. Use the value returned in the response. */
	TOptional<FString> PageCursor;
};

class IMMUTABLEZKEVMAPI_API APIStacksApi::SearchNFTsResponse : public Response
{
public:
    virtual ~SearchNFTsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    APISearchNFTsResult Content;
};

/* Experimental: Search NFT stacks
 *
 * ![Experimental](https://img.shields.io/badge/status-experimental-yellow) Search NFT stacks
*/
class IMMUTABLEZKEVMAPI_API APIStacksApi::SearchStacksRequest : public Request
{
public:
    virtual ~SearchStacksRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The name of chain */
	FString ChainName;
	/* List of contract addresses to filter by */
	TArray<FString> ContractAddress;
	/* Account address to filter by */
	TOptional<FString> AccountAddress;
	/* Whether to the listings should include only the owner created listings */
	TOptional<bool> OnlyIncludeOwnerListings;
	/* Filters results to include only stacks that have a current active listing. False and 'null' return all unfiltered stacks. */
	TOptional<bool> OnlyIfHasActiveListings;
	/* JSON encoded traits to filter by. e.g. encodeURIComponent(JSON.stringify({\"rarity\": {\"values\": [\"common\", \"rare\"], \"condition\": \"eq\"}})) */
	TOptional<FString> Trait;
	/* Keyword to search NFT name and description. Alphanumeric characters only. */
	TOptional<FString> Keyword;
	enum class SortByEnum
	{
		CheapestFirst,
  	};

	static FString EnumToString(const SortByEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, SortByEnum& EnumValue);
	/* Sort results in a specific order */
	TOptional<SortByEnum> SortBy;
	/* Number of results to return per page */
	TOptional<int32> PageSize;
	/* Encoded page cursor to retrieve previous or next page. Use the value returned in the response. */
	TOptional<FString> PageCursor;
};

class IMMUTABLEZKEVMAPI_API APIStacksApi::SearchStacksResponse : public Response
{
public:
    virtual ~SearchStacksResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    APISearchStacksResult Content;
};

}
