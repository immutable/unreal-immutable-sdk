/**
 * Immutable zkEVM API
 * Immutable Multi Rollup API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "APIActivityDetails.h"

#include "ImmutablezkEVMAPIModule.h"
#include "APIHelpers.h"

#include "Templates/SharedPointer.h"

namespace ImmutablezkEVMAPI
{

void APIActivityDetails::WriteJson(JsonWriter& Writer) const
{
	if (const APIBurn* APIBurnValue = OneOf.TryGet<APIBurn>())
	{
		WriteJsonValue(Writer, *APIBurnValue);
	}
	else if (const APIDeposit* APIDepositValue = OneOf.TryGet<APIDeposit>())
	{
		WriteJsonValue(Writer, *APIDepositValue);
	}
	else if (const APIMint* APIMintValue = OneOf.TryGet<APIMint>())
	{
		WriteJsonValue(Writer, *APIMintValue);
	}
	else if (const APINFTSale* APINFTSaleValue = OneOf.TryGet<APINFTSale>())
	{
		WriteJsonValue(Writer, *APINFTSaleValue);
	}
	else if (const APITransfer* APITransferValue = OneOf.TryGet<APITransfer>())
	{
		WriteJsonValue(Writer, *APITransferValue);
	}
	else if (const APIWithdrawal* APIWithdrawalValue = OneOf.TryGet<APIWithdrawal>())
	{
		WriteJsonValue(Writer, *APIWithdrawalValue);
	}
}

bool APIActivityDetails::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	APIBurn APIBurnValue;
	if (const bool bIsAPIBurn = TryGetJsonValue(JsonValue, APIBurnValue))
	{
		OneOf.Set<APIBurn>(APIBurnValue);
		return true;
	}

	APIDeposit APIDepositValue;
	if (const bool bIsAPIDeposit = TryGetJsonValue(JsonValue, APIDepositValue))
	{
		OneOf.Set<APIDeposit>(APIDepositValue);
		return true;
	}

	APIMint APIMintValue;
	if (const bool bIsAPIMint = TryGetJsonValue(JsonValue, APIMintValue))
	{
		OneOf.Set<APIMint>(APIMintValue);
		return true;
	}

	APINFTSale APINFTSaleValue;
	if (const bool bIsAPINFTSale = TryGetJsonValue(JsonValue, APINFTSaleValue))
	{
		OneOf.Set<APINFTSale>(APINFTSaleValue);
		return true;
	}

	APITransfer APITransferValue;
	if (const bool bIsAPITransfer = TryGetJsonValue(JsonValue, APITransferValue))
	{
		OneOf.Set<APITransfer>(APITransferValue);
		return true;
	}

	APIWithdrawal APIWithdrawalValue;
	if (const bool bIsAPIWithdrawal = TryGetJsonValue(JsonValue, APIWithdrawalValue))
	{
		OneOf.Set<APIWithdrawal>(APIWithdrawalValue);
		return true;
	}

	return false;
}

}
