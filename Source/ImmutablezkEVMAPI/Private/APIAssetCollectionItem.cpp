/**
 * Immutable zkEVM API
 * Immutable Multi Rollup API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "APIAssetCollectionItem.h"

#include "ImmutablezkEVMAPIModule.h"
#include "APIHelpers.h"

#include "Templates/SharedPointer.h"

namespace ImmutablezkEVMAPI
{

inline FString ToString(const APIAssetCollectionItem::TypeEnum& Value)
{
	switch (Value)
	{
	case APIAssetCollectionItem::TypeEnum::ERC721COLLECTION:
		return TEXT("ERC721_COLLECTION");
	case APIAssetCollectionItem::TypeEnum::ERC1155COLLECTION:
		return TEXT("ERC1155_COLLECTION");
	}

	UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Invalid APIAssetCollectionItem::TypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString APIAssetCollectionItem::EnumToString(const APIAssetCollectionItem::TypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, APIAssetCollectionItem::TypeEnum& Value)
{
	static TMap<FString, APIAssetCollectionItem::TypeEnum> StringToEnum = { 
		{ TEXT("ERC721_COLLECTION"), APIAssetCollectionItem::TypeEnum::ERC721COLLECTION },
		{ TEXT("ERC1155_COLLECTION"), APIAssetCollectionItem::TypeEnum::ERC1155COLLECTION }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool APIAssetCollectionItem::EnumFromString(const FString& EnumAsString, APIAssetCollectionItem::TypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const APIAssetCollectionItem::TypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, APIAssetCollectionItem::TypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void APIAssetCollectionItem::WriteJson(JsonWriter& Writer) const
{
	if (const APIERC1155CollectionItem* APIERC1155CollectionItemValue = OneOf.TryGet<APIERC1155CollectionItem>())
	{
		WriteJsonValue(Writer, *APIERC1155CollectionItemValue);
	}
	else if (const APIERC721CollectionItem* APIERC721CollectionItemValue = OneOf.TryGet<APIERC721CollectionItem>())
	{
		WriteJsonValue(Writer, *APIERC721CollectionItemValue);
	}
}

bool APIAssetCollectionItem::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	APIERC1155CollectionItem APIERC1155CollectionItemValue;
	if (const bool bIsAPIERC1155CollectionItem = TryGetJsonValue(JsonValue, APIERC1155CollectionItemValue))
	{
		OneOf.Set<APIERC1155CollectionItem>(APIERC1155CollectionItemValue);
		return true;
	}

	APIERC721CollectionItem APIERC721CollectionItemValue;
	if (const bool bIsAPIERC721CollectionItem = TryGetJsonValue(JsonValue, APIERC721CollectionItemValue))
	{
		OneOf.Set<APIERC721CollectionItem>(APIERC721CollectionItemValue);
		return true;
	}

	return false;
}

}
