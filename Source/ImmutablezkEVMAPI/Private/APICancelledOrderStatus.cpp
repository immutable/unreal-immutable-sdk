/**
 * Immutable zkEVM API
 * Immutable Multi Rollup API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "APICancelledOrderStatus.h"

#include "ImmutablezkEVMAPIModule.h"
#include "APIHelpers.h"

#include "Templates/SharedPointer.h"

namespace ImmutablezkEVMAPI
{

inline FString ToString(const APICancelledOrderStatus::NameEnum& Value)
{
	switch (Value)
	{
	case APICancelledOrderStatus::NameEnum::Cancelled:
		return TEXT("CANCELLED");
	}

	UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Invalid APICancelledOrderStatus::NameEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString APICancelledOrderStatus::EnumToString(const APICancelledOrderStatus::NameEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, APICancelledOrderStatus::NameEnum& Value)
{
	static TMap<FString, APICancelledOrderStatus::NameEnum> StringToEnum = { 
		{ TEXT("CANCELLED"), APICancelledOrderStatus::NameEnum::Cancelled }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool APICancelledOrderStatus::EnumFromString(const FString& EnumAsString, APICancelledOrderStatus::NameEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const APICancelledOrderStatus::NameEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, APICancelledOrderStatus::NameEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const APICancelledOrderStatus::CancellationTypeEnum& Value)
{
	switch (Value)
	{
	case APICancelledOrderStatus::CancellationTypeEnum::OnChain:
		return TEXT("ON_CHAIN");
	case APICancelledOrderStatus::CancellationTypeEnum::OffChain:
		return TEXT("OFF_CHAIN");
	case APICancelledOrderStatus::CancellationTypeEnum::Underfunded:
		return TEXT("UNDERFUNDED");
	}

	UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Invalid APICancelledOrderStatus::CancellationTypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString APICancelledOrderStatus::EnumToString(const APICancelledOrderStatus::CancellationTypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, APICancelledOrderStatus::CancellationTypeEnum& Value)
{
	static TMap<FString, APICancelledOrderStatus::CancellationTypeEnum> StringToEnum = { 
		{ TEXT("ON_CHAIN"), APICancelledOrderStatus::CancellationTypeEnum::OnChain },
		{ TEXT("OFF_CHAIN"), APICancelledOrderStatus::CancellationTypeEnum::OffChain },
		{ TEXT("UNDERFUNDED"), APICancelledOrderStatus::CancellationTypeEnum::Underfunded }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool APICancelledOrderStatus::EnumFromString(const FString& EnumAsString, APICancelledOrderStatus::CancellationTypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const APICancelledOrderStatus::CancellationTypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, APICancelledOrderStatus::CancellationTypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void APICancelledOrderStatus::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("name")); WriteJsonValue(Writer, Name);
	Writer->WriteIdentifierPrefix(TEXT("pending")); WriteJsonValue(Writer, Pending);
	Writer->WriteIdentifierPrefix(TEXT("cancellation_type")); WriteJsonValue(Writer, CancellationType);
	Writer->WriteObjectEnd();
}

bool APICancelledOrderStatus::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("name"), Name);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("pending"), Pending);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("cancellation_type"), CancellationType);

	return ParseSuccess;
}

}
