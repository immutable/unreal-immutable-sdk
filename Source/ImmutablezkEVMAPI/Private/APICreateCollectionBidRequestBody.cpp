/**
 * Immutable zkEVM API
 * Immutable Multi Rollup API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "APICreateCollectionBidRequestBody.h"

#include "ImmutablezkEVMAPIModule.h"
#include "APIHelpers.h"

#include "Templates/SharedPointer.h"

namespace ImmutablezkEVMAPI
{

void APICreateCollectionBidRequestBody::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("account_address")); WriteJsonValue(Writer, AccountAddress);
	Writer->WriteIdentifierPrefix(TEXT("order_hash")); WriteJsonValue(Writer, OrderHash);
	Writer->WriteIdentifierPrefix(TEXT("buy")); WriteJsonValue(Writer, Buy);
	Writer->WriteIdentifierPrefix(TEXT("fees")); WriteJsonValue(Writer, Fees);
	Writer->WriteIdentifierPrefix(TEXT("end_at")); WriteJsonValue(Writer, EndAt);
	Writer->WriteIdentifierPrefix(TEXT("protocol_data")); WriteJsonValue(Writer, ProtocolData);
	Writer->WriteIdentifierPrefix(TEXT("salt")); WriteJsonValue(Writer, Salt);
	Writer->WriteIdentifierPrefix(TEXT("sell")); WriteJsonValue(Writer, Sell);
	Writer->WriteIdentifierPrefix(TEXT("signature")); WriteJsonValue(Writer, Signature);
	Writer->WriteIdentifierPrefix(TEXT("start_at")); WriteJsonValue(Writer, StartAt);
	Writer->WriteObjectEnd();
}

bool APICreateCollectionBidRequestBody::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("account_address"), AccountAddress);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("order_hash"), OrderHash);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("buy"), Buy);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("fees"), Fees);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("end_at"), EndAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("protocol_data"), ProtocolData);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("salt"), Salt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("sell"), Sell);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("signature"), Signature);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("start_at"), StartAt);

	return ParseSuccess;
}

}
