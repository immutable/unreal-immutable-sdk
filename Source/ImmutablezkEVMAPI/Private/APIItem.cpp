/**
 * Immutable zkEVM API
 * Immutable Multi Rollup API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "APIItem.h"

#include "ImmutablezkEVMAPIModule.h"
#include "APIHelpers.h"

#include "Templates/SharedPointer.h"

namespace ImmutablezkEVMAPI
{

inline FString ToString(const APIItem::TypeEnum& Value)
{
	switch (Value)
	{
	case APIItem::TypeEnum::Native:
		return TEXT("NATIVE");
	case APIItem::TypeEnum::ERC20:
		return TEXT("ERC20");
	case APIItem::TypeEnum::ERC721:
		return TEXT("ERC721");
	case APIItem::TypeEnum::ERC1155:
		return TEXT("ERC1155");
	case APIItem::TypeEnum::ERC721COLLECTION:
		return TEXT("ERC721_COLLECTION");
	case APIItem::TypeEnum::ERC1155COLLECTION:
		return TEXT("ERC1155_COLLECTION");
	}

	UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Invalid APIItem::TypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString APIItem::EnumToString(const APIItem::TypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, APIItem::TypeEnum& Value)
{
	static TMap<FString, APIItem::TypeEnum> StringToEnum = { 
		{ TEXT("NATIVE"), APIItem::TypeEnum::Native },
		{ TEXT("ERC20"), APIItem::TypeEnum::ERC20 },
		{ TEXT("ERC721"), APIItem::TypeEnum::ERC721 },
		{ TEXT("ERC1155"), APIItem::TypeEnum::ERC1155 },
		{ TEXT("ERC721_COLLECTION"), APIItem::TypeEnum::ERC721COLLECTION },
		{ TEXT("ERC1155_COLLECTION"), APIItem::TypeEnum::ERC1155COLLECTION }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool APIItem::EnumFromString(const FString& EnumAsString, APIItem::TypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const APIItem::TypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, APIItem::TypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void APIItem::WriteJson(JsonWriter& Writer) const
{
	if (const APIERC1155CollectionItem* APIERC1155CollectionItemValue = OneOf.TryGet<APIERC1155CollectionItem>())
	{
		WriteJsonValue(Writer, *APIERC1155CollectionItemValue);
	}
	else if (const APIERC1155Item* APIERC1155ItemValue = OneOf.TryGet<APIERC1155Item>())
	{
		WriteJsonValue(Writer, *APIERC1155ItemValue);
	}
	else if (const APIERC20Item* APIERC20ItemValue = OneOf.TryGet<APIERC20Item>())
	{
		WriteJsonValue(Writer, *APIERC20ItemValue);
	}
	else if (const APIERC721CollectionItem* APIERC721CollectionItemValue = OneOf.TryGet<APIERC721CollectionItem>())
	{
		WriteJsonValue(Writer, *APIERC721CollectionItemValue);
	}
	else if (const APIERC721Item* APIERC721ItemValue = OneOf.TryGet<APIERC721Item>())
	{
		WriteJsonValue(Writer, *APIERC721ItemValue);
	}
	else if (const APINativeItem* APINativeItemValue = OneOf.TryGet<APINativeItem>())
	{
		WriteJsonValue(Writer, *APINativeItemValue);
	}
}

bool APIItem::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	APIERC1155CollectionItem APIERC1155CollectionItemValue;
	if (const bool bIsAPIERC1155CollectionItem = TryGetJsonValue(JsonValue, APIERC1155CollectionItemValue))
	{
		OneOf.Set<APIERC1155CollectionItem>(APIERC1155CollectionItemValue);
		return true;
	}

	APIERC1155Item APIERC1155ItemValue;
	if (const bool bIsAPIERC1155Item = TryGetJsonValue(JsonValue, APIERC1155ItemValue))
	{
		OneOf.Set<APIERC1155Item>(APIERC1155ItemValue);
		return true;
	}

	APIERC20Item APIERC20ItemValue;
	if (const bool bIsAPIERC20Item = TryGetJsonValue(JsonValue, APIERC20ItemValue))
	{
		OneOf.Set<APIERC20Item>(APIERC20ItemValue);
		return true;
	}

	APIERC721CollectionItem APIERC721CollectionItemValue;
	if (const bool bIsAPIERC721CollectionItem = TryGetJsonValue(JsonValue, APIERC721CollectionItemValue))
	{
		OneOf.Set<APIERC721CollectionItem>(APIERC721CollectionItemValue);
		return true;
	}

	APIERC721Item APIERC721ItemValue;
	if (const bool bIsAPIERC721Item = TryGetJsonValue(JsonValue, APIERC721ItemValue))
	{
		OneOf.Set<APIERC721Item>(APIERC721ItemValue);
		return true;
	}

	APINativeItem APINativeItemValue;
	if (const bool bIsAPINativeItem = TryGetJsonValue(JsonValue, APINativeItemValue))
	{
		OneOf.Set<APINativeItem>(APINativeItemValue);
		return true;
	}

	return false;
}

}
