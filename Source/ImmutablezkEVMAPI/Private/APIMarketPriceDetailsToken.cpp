/**
 * Immutable zkEVM API
 * Immutable Multi Rollup API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "APIMarketPriceDetailsToken.h"

#include "ImmutablezkEVMAPIModule.h"
#include "APIHelpers.h"

#include "Templates/SharedPointer.h"

namespace ImmutablezkEVMAPI
{

inline FString ToString(const APIMarketPriceDetailsToken::TypeEnum& Value)
{
	switch (Value)
	{
	case APIMarketPriceDetailsToken::TypeEnum::Native:
		return TEXT("NATIVE");
	case APIMarketPriceDetailsToken::TypeEnum::ERC20:
		return TEXT("ERC20");
	}

	UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Invalid APIMarketPriceDetailsToken::TypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString APIMarketPriceDetailsToken::EnumToString(const APIMarketPriceDetailsToken::TypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, APIMarketPriceDetailsToken::TypeEnum& Value)
{
	static TMap<FString, APIMarketPriceDetailsToken::TypeEnum> StringToEnum = { 
		{ TEXT("NATIVE"), APIMarketPriceDetailsToken::TypeEnum::Native },
		{ TEXT("ERC20"), APIMarketPriceDetailsToken::TypeEnum::ERC20 }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool APIMarketPriceDetailsToken::EnumFromString(const FString& EnumAsString, APIMarketPriceDetailsToken::TypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const APIMarketPriceDetailsToken::TypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, APIMarketPriceDetailsToken::TypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void APIMarketPriceDetailsToken::WriteJson(JsonWriter& Writer) const
{
	if (const APIMarketPriceERC20Token* APIMarketPriceERC20TokenValue = OneOf.TryGet<APIMarketPriceERC20Token>())
	{
		WriteJsonValue(Writer, *APIMarketPriceERC20TokenValue);
	}
	else if (const APIMarketPriceNativeToken* APIMarketPriceNativeTokenValue = OneOf.TryGet<APIMarketPriceNativeToken>())
	{
		WriteJsonValue(Writer, *APIMarketPriceNativeTokenValue);
	}
}

bool APIMarketPriceDetailsToken::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	APIMarketPriceERC20Token APIMarketPriceERC20TokenValue;
	if (const bool bIsAPIMarketPriceERC20Token = TryGetJsonValue(JsonValue, APIMarketPriceERC20TokenValue))
	{
		OneOf.Set<APIMarketPriceERC20Token>(APIMarketPriceERC20TokenValue);
		return true;
	}

	APIMarketPriceNativeToken APIMarketPriceNativeTokenValue;
	if (const bool bIsAPIMarketPriceNativeToken = TryGetJsonValue(JsonValue, APIMarketPriceNativeTokenValue))
	{
		OneOf.Set<APIMarketPriceNativeToken>(APIMarketPriceNativeTokenValue);
		return true;
	}

	return false;
}

}
