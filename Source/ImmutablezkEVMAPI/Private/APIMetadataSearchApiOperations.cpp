/**
 * Immutable zkEVM API
 * Immutable Multi Rollup API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "APIMetadataSearchApiOperations.h"

#include "ImmutablezkEVMAPIModule.h"
#include "APIHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace ImmutablezkEVMAPI
{

FString APIMetadataSearchApi::ListFiltersRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("chain_name"), FStringFormatArg(ToUrlString(ChainName)) },
	{ TEXT("contract_address"), FStringFormatArg(ToUrlString(ContractAddress)) } };

	FString Path = FString::Format(TEXT("/v1/chains/{chain_name}/search/filters/{contract_address}"), PathParams);

	return Path;
}

void APIMetadataSearchApi::ListFiltersRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void APIMetadataSearchApi::ListFiltersResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("200 response"));
		break;
	case 400:
		SetResponseString(TEXT("Bad Request (400)"));
		break;
	case 401:
		SetResponseString(TEXT("Unauthorised Request (401)"));
		break;
	case 403:
		SetResponseString(TEXT("Forbidden Request (403)"));
		break;
	case 404:
		SetResponseString(TEXT("The specified resource was not found (404)"));
		break;
	case 429:
		SetResponseString(TEXT("Too Many Requests (429)"));
		break;
	case 500:
		SetResponseString(TEXT("Internal Server Error (500)"));
		break;
	}
}

bool APIMetadataSearchApi::ListFiltersResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString APIMetadataSearchApi::SearchNFTsRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("chain_name"), FStringFormatArg(ToUrlString(ChainName)) } };

	FString Path = FString::Format(TEXT("/v1/chains/{chain_name}/search/nfts"), PathParams);

	TArray<FString> QueryParams;
	QueryParams.Add(CollectionToUrlString_multi(ContractAddress, TEXT("contract_address")));
	if(AccountAddress.IsSet())
	{
		QueryParams.Add(FString(TEXT("account_address=")) + ToUrlString(AccountAddress.GetValue()));
	}
	if(StackId.IsSet())
	{
		QueryParams.Add(CollectionToUrlString_multi(StackId.GetValue(), TEXT("stack_id")));
	}
	if(OnlyIncludeOwnerListings.IsSet())
	{
		QueryParams.Add(FString(TEXT("only_include_owner_listings=")) + ToUrlString(OnlyIncludeOwnerListings.GetValue()));
	}
	if(PageSize.IsSet())
	{
		QueryParams.Add(FString(TEXT("page_size=")) + ToUrlString(PageSize.GetValue()));
	}
	if(PageCursor.IsSet())
	{
		QueryParams.Add(FString(TEXT("page_cursor=")) + ToUrlString(PageCursor.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void APIMetadataSearchApi::SearchNFTsRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void APIMetadataSearchApi::SearchNFTsResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("200 response"));
		break;
	case 400:
		SetResponseString(TEXT("Bad Request (400)"));
		break;
	case 401:
		SetResponseString(TEXT("Unauthorised Request (401)"));
		break;
	case 403:
		SetResponseString(TEXT("Forbidden Request (403)"));
		break;
	case 404:
		SetResponseString(TEXT("The specified resource was not found (404)"));
		break;
	case 429:
		SetResponseString(TEXT("Too Many Requests (429)"));
		break;
	case 500:
		SetResponseString(TEXT("Internal Server Error (500)"));
		break;
	}
}

bool APIMetadataSearchApi::SearchNFTsResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const APIMetadataSearchApi::SearchStacksRequest::SortByEnum& Value)
{
	switch (Value)
	{
	case APIMetadataSearchApi::SearchStacksRequest::SortByEnum::CheapestFirst:
		return TEXT("cheapest_first");
	}

	UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Invalid APIMetadataSearchApi::SearchStacksRequest::SortByEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString APIMetadataSearchApi::SearchStacksRequest::EnumToString(const APIMetadataSearchApi::SearchStacksRequest::SortByEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, APIMetadataSearchApi::SearchStacksRequest::SortByEnum& Value)
{
	static TMap<FString, APIMetadataSearchApi::SearchStacksRequest::SortByEnum> StringToEnum = { 
		{ TEXT("cheapest_first"), APIMetadataSearchApi::SearchStacksRequest::SortByEnum::CheapestFirst }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool APIMetadataSearchApi::SearchStacksRequest::EnumFromString(const FString& EnumAsString, APIMetadataSearchApi::SearchStacksRequest::SortByEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const APIMetadataSearchApi::SearchStacksRequest::SortByEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, APIMetadataSearchApi::SearchStacksRequest::SortByEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString APIMetadataSearchApi::SearchStacksRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("chain_name"), FStringFormatArg(ToUrlString(ChainName)) } };

	FString Path = FString::Format(TEXT("/v1/chains/{chain_name}/search/stacks"), PathParams);

	TArray<FString> QueryParams;
	QueryParams.Add(CollectionToUrlString_multi(ContractAddress, TEXT("contract_address")));
	if(AccountAddress.IsSet())
	{
		QueryParams.Add(FString(TEXT("account_address=")) + ToUrlString(AccountAddress.GetValue()));
	}
	if(OnlyIncludeOwnerListings.IsSet())
	{
		QueryParams.Add(FString(TEXT("only_include_owner_listings=")) + ToUrlString(OnlyIncludeOwnerListings.GetValue()));
	}
	if(OnlyIfHasActiveListings.IsSet())
	{
		QueryParams.Add(FString(TEXT("only_if_has_active_listings=")) + ToUrlString(OnlyIfHasActiveListings.GetValue()));
	}
	if(Traits.IsSet())
	{
		QueryParams.Add(FString(TEXT("traits=")) + ToUrlString(Traits.GetValue()));
	}
	if(Keyword.IsSet())
	{
		QueryParams.Add(FString(TEXT("keyword=")) + ToUrlString(Keyword.GetValue()));
	}
	if(PaymentToken.IsSet())
	{
		QueryParams.Add(FString(TEXT("payment_token=")) + ToUrlString(PaymentToken.GetValue()));
	}
	if(SortBy.IsSet())
	{
		QueryParams.Add(FString(TEXT("sort_by=")) + ToUrlString(SortBy.GetValue()));
	}
	if(PageSize.IsSet())
	{
		QueryParams.Add(FString(TEXT("page_size=")) + ToUrlString(PageSize.GetValue()));
	}
	if(PageCursor.IsSet())
	{
		QueryParams.Add(FString(TEXT("page_cursor=")) + ToUrlString(PageCursor.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void APIMetadataSearchApi::SearchStacksRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void APIMetadataSearchApi::SearchStacksResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("200 response"));
		break;
	case 400:
		SetResponseString(TEXT("Bad Request (400)"));
		break;
	case 401:
		SetResponseString(TEXT("Unauthorised Request (401)"));
		break;
	case 403:
		SetResponseString(TEXT("Forbidden Request (403)"));
		break;
	case 404:
		SetResponseString(TEXT("The specified resource was not found (404)"));
		break;
	case 429:
		SetResponseString(TEXT("Too Many Requests (429)"));
		break;
	case 500:
		SetResponseString(TEXT("Internal Server Error (500)"));
		break;
	}
}

bool APIMetadataSearchApi::SearchStacksResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

}
