/**
 * Immutable zkEVM API
 * Immutable Multi Rollup API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "APIOrder.h"

#include "ImmutablezkEVMAPIModule.h"
#include "APIHelpers.h"

#include "Templates/SharedPointer.h"

namespace ImmutablezkEVMAPI
{

inline FString ToString(const APIOrder::TypeEnum& Value)
{
	switch (Value)
	{
	case APIOrder::TypeEnum::Listing:
		return TEXT("LISTING");
	case APIOrder::TypeEnum::Bid:
		return TEXT("BID");
	case APIOrder::TypeEnum::CollectionBid:
		return TEXT("COLLECTION_BID");
	}

	UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Invalid APIOrder::TypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString APIOrder::EnumToString(const APIOrder::TypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, APIOrder::TypeEnum& Value)
{
	static TMap<FString, APIOrder::TypeEnum> StringToEnum = { 
		{ TEXT("LISTING"), APIOrder::TypeEnum::Listing },
		{ TEXT("BID"), APIOrder::TypeEnum::Bid },
		{ TEXT("COLLECTION_BID"), APIOrder::TypeEnum::CollectionBid }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool APIOrder::EnumFromString(const FString& EnumAsString, APIOrder::TypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const APIOrder::TypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, APIOrder::TypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void APIOrder::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("account_address")); WriteJsonValue(Writer, AccountAddress);
	Writer->WriteIdentifierPrefix(TEXT("buy")); WriteJsonValue(Writer, Buy);
	Writer->WriteIdentifierPrefix(TEXT("fees")); WriteJsonValue(Writer, Fees);
	Writer->WriteIdentifierPrefix(TEXT("chain")); WriteJsonValue(Writer, Chain);
	Writer->WriteIdentifierPrefix(TEXT("created_at")); WriteJsonValue(Writer, CreatedAt);
	Writer->WriteIdentifierPrefix(TEXT("end_at")); WriteJsonValue(Writer, EndAt);
	Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id);
	Writer->WriteIdentifierPrefix(TEXT("order_hash")); WriteJsonValue(Writer, OrderHash);
	Writer->WriteIdentifierPrefix(TEXT("protocol_data")); WriteJsonValue(Writer, ProtocolData);
	Writer->WriteIdentifierPrefix(TEXT("salt")); WriteJsonValue(Writer, Salt);
	Writer->WriteIdentifierPrefix(TEXT("sell")); WriteJsonValue(Writer, Sell);
	Writer->WriteIdentifierPrefix(TEXT("signature")); WriteJsonValue(Writer, Signature);
	Writer->WriteIdentifierPrefix(TEXT("start_at")); WriteJsonValue(Writer, StartAt);
	Writer->WriteIdentifierPrefix(TEXT("status")); WriteJsonValue(Writer, Status);
	Writer->WriteIdentifierPrefix(TEXT("type")); WriteJsonValue(Writer, Type);
	Writer->WriteIdentifierPrefix(TEXT("updated_at")); WriteJsonValue(Writer, UpdatedAt);
	Writer->WriteIdentifierPrefix(TEXT("fill_status")); WriteJsonValue(Writer, FillStatus);
	Writer->WriteObjectEnd();
}

bool APIOrder::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("account_address"), AccountAddress);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("buy"), Buy);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("fees"), Fees);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("chain"), Chain);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("created_at"), CreatedAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("end_at"), EndAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("order_hash"), OrderHash);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("protocol_data"), ProtocolData);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("salt"), Salt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("sell"), Sell);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("signature"), Signature);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("start_at"), StartAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("status"), Status);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("type"), Type);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("updated_at"), UpdatedAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("fill_status"), FillStatus);

	return ParseSuccess;
}

}
