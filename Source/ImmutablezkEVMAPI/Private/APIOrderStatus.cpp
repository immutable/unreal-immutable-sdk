/**
 * Immutable zkEVM API
 * Immutable Multi Rollup API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "APIOrderStatus.h"

#include "ImmutablezkEVMAPIModule.h"
#include "APIHelpers.h"

#include "Templates/SharedPointer.h"

namespace ImmutablezkEVMAPI
{

inline FString ToString(const APIOrderStatus::NameEnum& Value)
{
	switch (Value)
	{
	case APIOrderStatus::NameEnum::Expired:
		return TEXT("EXPIRED");
	}

	UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Invalid APIOrderStatus::NameEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString APIOrderStatus::EnumToString(const APIOrderStatus::NameEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, APIOrderStatus::NameEnum& Value)
{
	static TMap<FString, APIOrderStatus::NameEnum> StringToEnum = { 
		{ TEXT("EXPIRED"), APIOrderStatus::NameEnum::Expired }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool APIOrderStatus::EnumFromString(const FString& EnumAsString, APIOrderStatus::NameEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const APIOrderStatus::NameEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, APIOrderStatus::NameEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

inline FString ToString(const APIOrderStatus::CancellationTypeEnum& Value)
{
	switch (Value)
	{
	case APIOrderStatus::CancellationTypeEnum::OnChain:
		return TEXT("ON_CHAIN");
	case APIOrderStatus::CancellationTypeEnum::OffChain:
		return TEXT("OFF_CHAIN");
	case APIOrderStatus::CancellationTypeEnum::Underfunded:
		return TEXT("UNDERFUNDED");
	}

	UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Invalid APIOrderStatus::CancellationTypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString APIOrderStatus::EnumToString(const APIOrderStatus::CancellationTypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, APIOrderStatus::CancellationTypeEnum& Value)
{
	static TMap<FString, APIOrderStatus::CancellationTypeEnum> StringToEnum = { 
		{ TEXT("ON_CHAIN"), APIOrderStatus::CancellationTypeEnum::OnChain },
		{ TEXT("OFF_CHAIN"), APIOrderStatus::CancellationTypeEnum::OffChain },
		{ TEXT("UNDERFUNDED"), APIOrderStatus::CancellationTypeEnum::Underfunded }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool APIOrderStatus::EnumFromString(const FString& EnumAsString, APIOrderStatus::CancellationTypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const APIOrderStatus::CancellationTypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, APIOrderStatus::CancellationTypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void APIOrderStatus::WriteJson(JsonWriter& Writer) const
{
	if (const APIActiveOrderStatus* APIActiveOrderStatusValue = OneOf.TryGet<APIActiveOrderStatus>())
	{
		WriteJsonValue(Writer, *APIActiveOrderStatusValue);
	}
	else if (const APICancelledOrderStatus* APICancelledOrderStatusValue = OneOf.TryGet<APICancelledOrderStatus>())
	{
		WriteJsonValue(Writer, *APICancelledOrderStatusValue);
	}
	else if (const APIExpiredOrderStatus* APIExpiredOrderStatusValue = OneOf.TryGet<APIExpiredOrderStatus>())
	{
		WriteJsonValue(Writer, *APIExpiredOrderStatusValue);
	}
	else if (const APIFilledOrderStatus* APIFilledOrderStatusValue = OneOf.TryGet<APIFilledOrderStatus>())
	{
		WriteJsonValue(Writer, *APIFilledOrderStatusValue);
	}
	else if (const APIInactiveOrderStatus* APIInactiveOrderStatusValue = OneOf.TryGet<APIInactiveOrderStatus>())
	{
		WriteJsonValue(Writer, *APIInactiveOrderStatusValue);
	}
	else if (const APIPendingOrderStatus* APIPendingOrderStatusValue = OneOf.TryGet<APIPendingOrderStatus>())
	{
		WriteJsonValue(Writer, *APIPendingOrderStatusValue);
	}
}

bool APIOrderStatus::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	APIActiveOrderStatus APIActiveOrderStatusValue;
	if (const bool bIsAPIActiveOrderStatus = TryGetJsonValue(JsonValue, APIActiveOrderStatusValue))
	{
		OneOf.Set<APIActiveOrderStatus>(APIActiveOrderStatusValue);
		return true;
	}

	APICancelledOrderStatus APICancelledOrderStatusValue;
	if (const bool bIsAPICancelledOrderStatus = TryGetJsonValue(JsonValue, APICancelledOrderStatusValue))
	{
		OneOf.Set<APICancelledOrderStatus>(APICancelledOrderStatusValue);
		return true;
	}

	APIExpiredOrderStatus APIExpiredOrderStatusValue;
	if (const bool bIsAPIExpiredOrderStatus = TryGetJsonValue(JsonValue, APIExpiredOrderStatusValue))
	{
		OneOf.Set<APIExpiredOrderStatus>(APIExpiredOrderStatusValue);
		return true;
	}

	APIFilledOrderStatus APIFilledOrderStatusValue;
	if (const bool bIsAPIFilledOrderStatus = TryGetJsonValue(JsonValue, APIFilledOrderStatusValue))
	{
		OneOf.Set<APIFilledOrderStatus>(APIFilledOrderStatusValue);
		return true;
	}

	APIInactiveOrderStatus APIInactiveOrderStatusValue;
	if (const bool bIsAPIInactiveOrderStatus = TryGetJsonValue(JsonValue, APIInactiveOrderStatusValue))
	{
		OneOf.Set<APIInactiveOrderStatus>(APIInactiveOrderStatusValue);
		return true;
	}

	APIPendingOrderStatus APIPendingOrderStatusValue;
	if (const bool bIsAPIPendingOrderStatus = TryGetJsonValue(JsonValue, APIPendingOrderStatusValue))
	{
		OneOf.Set<APIPendingOrderStatus>(APIPendingOrderStatusValue);
		return true;
	}

	return false;
}

}
