/**
 * Immutable zkEVM API
 * Immutable Multi Rollup API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "APIOrderStatusName.h"

#include "ImmutablezkEVMAPIModule.h"
#include "APIHelpers.h"

#include "Templates/SharedPointer.h"

namespace ImmutablezkEVMAPI
{

inline FString ToString(const APIOrderStatusName::Values& Value)
{
	switch (Value)
	{
	case APIOrderStatusName::Values::Pending:
		return TEXT("PENDING");
	case APIOrderStatusName::Values::Active:
		return TEXT("ACTIVE");
	case APIOrderStatusName::Values::Inactive:
		return TEXT("INACTIVE");
	case APIOrderStatusName::Values::Filled:
		return TEXT("FILLED");
	case APIOrderStatusName::Values::Expired:
		return TEXT("EXPIRED");
	case APIOrderStatusName::Values::Cancelled:
		return TEXT("CANCELLED");
	}

	UE_LOG(LogImmutablezkEVMAPI, Error, TEXT("Invalid APIOrderStatusName::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString APIOrderStatusName::EnumToString(const APIOrderStatusName::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, APIOrderStatusName::Values& Value)
{
	static TMap<FString, APIOrderStatusName::Values> StringToEnum = { 
		{ TEXT("PENDING"), APIOrderStatusName::Values::Pending },
		{ TEXT("ACTIVE"), APIOrderStatusName::Values::Active },
		{ TEXT("INACTIVE"), APIOrderStatusName::Values::Inactive },
		{ TEXT("FILLED"), APIOrderStatusName::Values::Filled },
		{ TEXT("EXPIRED"), APIOrderStatusName::Values::Expired },
		{ TEXT("CANCELLED"), APIOrderStatusName::Values::Cancelled }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool APIOrderStatusName::EnumFromString(const FString& EnumAsString, APIOrderStatusName::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const APIOrderStatusName::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, APIOrderStatusName::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void APIOrderStatusName::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool APIOrderStatusName::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
