/**
 * Immutable zkEVM API
 * Immutable Multi Rollup API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "APIToken.h"

#include "ImmutablezkEVMAPIModule.h"
#include "APIHelpers.h"

#include "Templates/SharedPointer.h"

namespace ImmutablezkEVMAPI
{

void APIToken::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("chain")); WriteJsonValue(Writer, Chain);
	Writer->WriteIdentifierPrefix(TEXT("contract_address")); WriteJsonValue(Writer, ContractAddress);
	if (RootContractAddress.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("root_contract_address")); WriteJsonValue(Writer, RootContractAddress.GetValue());
	}
	if (RootChainId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("root_chain_id")); WriteJsonValue(Writer, RootChainId.GetValue());
	}
	if (BridgeUsed.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("bridge_used")); WriteJsonValue(Writer, BridgeUsed.GetValue());
	}
	if (Symbol.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("symbol")); WriteJsonValue(Writer, Symbol.GetValue());
	}
	if (Decimals.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("decimals")); WriteJsonValue(Writer, Decimals.GetValue());
	}
	if (ImageUrl.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("image_url")); WriteJsonValue(Writer, ImageUrl.GetValue());
	}
	if (Name.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("name")); WriteJsonValue(Writer, Name.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("verification_status")); WriteJsonValue(Writer, VerificationStatus);
	Writer->WriteIdentifierPrefix(TEXT("updated_at")); WriteJsonValue(Writer, UpdatedAt);
	Writer->WriteIdentifierPrefix(TEXT("is_canonical")); WriteJsonValue(Writer, IsCanonical);
	Writer->WriteObjectEnd();
}

bool APIToken::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("chain"), Chain);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("contract_address"), ContractAddress);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("root_contract_address"), RootContractAddress);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("root_chain_id"), RootChainId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("bridge_used"), BridgeUsed);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("symbol"), Symbol);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("decimals"), Decimals);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("image_url"), ImageUrl);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("name"), Name);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("verification_status"), VerificationStatus);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("updated_at"), UpdatedAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("is_canonical"), IsCanonical);

	return ParseSuccess;
}

}
