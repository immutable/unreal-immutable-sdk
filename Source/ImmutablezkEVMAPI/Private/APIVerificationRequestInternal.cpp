/**
 * Immutable zkEVM API
 * Immutable Multi Rollup API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "APIVerificationRequestInternal.h"

#include "ImmutablezkEVMAPIModule.h"
#include "APIHelpers.h"

#include "Templates/SharedPointer.h"

namespace ImmutablezkEVMAPI
{

void APIVerificationRequestInternal::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id);
	Writer->WriteIdentifierPrefix(TEXT("chain")); WriteJsonValue(Writer, Chain);
	Writer->WriteIdentifierPrefix(TEXT("contract_address")); WriteJsonValue(Writer, ContractAddress);
	if (OrgName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("org_name")); WriteJsonValue(Writer, OrgName.GetValue());
	}
	if (Name.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("name")); WriteJsonValue(Writer, Name.GetValue());
	}
	if (Symbol.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("symbol")); WriteJsonValue(Writer, Symbol.GetValue());
	}
	if (Description.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("description")); WriteJsonValue(Writer, Description.GetValue());
	}
	if (OrgId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("org_id")); WriteJsonValue(Writer, OrgId.GetValue());
	}
	if (RequesterEmail.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("requester_email")); WriteJsonValue(Writer, RequesterEmail.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("contract_type")); WriteJsonValue(Writer, ContractType);
	Writer->WriteIdentifierPrefix(TEXT("verification_request_status")); WriteJsonValue(Writer, VerificationRequestStatus);
	if (OrgTier.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("org_tier")); WriteJsonValue(Writer, OrgTier.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool APIVerificationRequestInternal::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("chain"), Chain);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("contract_address"), ContractAddress);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("org_name"), OrgName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("name"), Name);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("symbol"), Symbol);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("description"), Description);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("org_id"), OrgId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("requester_email"), RequesterEmail);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("contract_type"), ContractType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("verification_request_status"), VerificationRequestStatus);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("org_tier"), OrgTier);

	return ParseSuccess;
}

}
