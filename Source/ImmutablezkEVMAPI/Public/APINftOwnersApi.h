/**
 * Immutable zkEVM API
 * Immutable Multi Rollup API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "APIBaseModel.h"

namespace ImmutablezkEVMAPI
{

class IMMUTABLEZKEVMAPI_API APINftOwnersApi
{
public:
	APINftOwnersApi();
	~APINftOwnersApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class ListAllNFTOwnersRequest;
	class ListAllNFTOwnersResponse;
	class ListNFTOwnersRequest;
	class ListNFTOwnersResponse;
	class ListOwnersByContractAddressRequest;
	class ListOwnersByContractAddressResponse;
	
    DECLARE_DELEGATE_OneParam(FListAllNFTOwnersDelegate, const ListAllNFTOwnersResponse&);
    DECLARE_DELEGATE_OneParam(FListNFTOwnersDelegate, const ListNFTOwnersResponse&);
    DECLARE_DELEGATE_OneParam(FListOwnersByContractAddressDelegate, const ListOwnersByContractAddressResponse&);
    
    FHttpRequestPtr ListAllNFTOwners(const ListAllNFTOwnersRequest& Request, const FListAllNFTOwnersDelegate& Delegate = FListAllNFTOwnersDelegate()) const;
    FHttpRequestPtr ListNFTOwners(const ListNFTOwnersRequest& Request, const FListNFTOwnersDelegate& Delegate = FListNFTOwnersDelegate()) const;
    FHttpRequestPtr ListOwnersByContractAddress(const ListOwnersByContractAddressRequest& Request, const FListOwnersByContractAddressDelegate& Delegate = FListOwnersByContractAddressDelegate()) const;
    
private:
    void OnListAllNFTOwnersResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListAllNFTOwnersDelegate Delegate) const;
    void OnListNFTOwnersResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListNFTOwnersDelegate Delegate) const;
    void OnListOwnersByContractAddressResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListOwnersByContractAddressDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
