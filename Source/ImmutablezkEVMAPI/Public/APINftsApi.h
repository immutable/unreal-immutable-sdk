/**
 * Immutable zkEVM API
 * Immutable Multi Rollup API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "APIBaseModel.h"

namespace ImmutablezkEVMAPI
{

class IMMUTABLEZKEVMAPI_API APINftsApi
{
public:
	APINftsApi();
	~APINftsApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class CreateMintRequestRequest;
	class CreateMintRequestResponse;
	class GetMintRequestRequest;
	class GetMintRequestResponse;
	class GetNFTRequest;
	class GetNFTResponse;
	class ListAllNFTsRequest;
	class ListAllNFTsResponse;
	class ListMintRequestsRequest;
	class ListMintRequestsResponse;
	class ListNFTsRequest;
	class ListNFTsResponse;
	class ListNFTsByAccountAddressRequest;
	class ListNFTsByAccountAddressResponse;
	
    DECLARE_DELEGATE_OneParam(FCreateMintRequestDelegate, const CreateMintRequestResponse&);
    DECLARE_DELEGATE_OneParam(FGetMintRequestDelegate, const GetMintRequestResponse&);
    DECLARE_DELEGATE_OneParam(FGetNFTDelegate, const GetNFTResponse&);
    DECLARE_DELEGATE_OneParam(FListAllNFTsDelegate, const ListAllNFTsResponse&);
    DECLARE_DELEGATE_OneParam(FListMintRequestsDelegate, const ListMintRequestsResponse&);
    DECLARE_DELEGATE_OneParam(FListNFTsDelegate, const ListNFTsResponse&);
    DECLARE_DELEGATE_OneParam(FListNFTsByAccountAddressDelegate, const ListNFTsByAccountAddressResponse&);
    
    FHttpRequestPtr CreateMintRequest(const CreateMintRequestRequest& Request, const FCreateMintRequestDelegate& Delegate = FCreateMintRequestDelegate()) const;
    FHttpRequestPtr GetMintRequest(const GetMintRequestRequest& Request, const FGetMintRequestDelegate& Delegate = FGetMintRequestDelegate()) const;
    FHttpRequestPtr GetNFT(const GetNFTRequest& Request, const FGetNFTDelegate& Delegate = FGetNFTDelegate()) const;
    FHttpRequestPtr ListAllNFTs(const ListAllNFTsRequest& Request, const FListAllNFTsDelegate& Delegate = FListAllNFTsDelegate()) const;
    FHttpRequestPtr ListMintRequests(const ListMintRequestsRequest& Request, const FListMintRequestsDelegate& Delegate = FListMintRequestsDelegate()) const;
    FHttpRequestPtr ListNFTs(const ListNFTsRequest& Request, const FListNFTsDelegate& Delegate = FListNFTsDelegate()) const;
    FHttpRequestPtr ListNFTsByAccountAddress(const ListNFTsByAccountAddressRequest& Request, const FListNFTsByAccountAddressDelegate& Delegate = FListNFTsByAccountAddressDelegate()) const;
    
private:
    void OnCreateMintRequestResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateMintRequestDelegate Delegate) const;
    void OnGetMintRequestResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetMintRequestDelegate Delegate) const;
    void OnGetNFTResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetNFTDelegate Delegate) const;
    void OnListAllNFTsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListAllNFTsDelegate Delegate) const;
    void OnListMintRequestsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListMintRequestsDelegate Delegate) const;
    void OnListNFTsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListNFTsDelegate Delegate) const;
    void OnListNFTsByAccountAddressResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FListNFTsByAccountAddressDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
