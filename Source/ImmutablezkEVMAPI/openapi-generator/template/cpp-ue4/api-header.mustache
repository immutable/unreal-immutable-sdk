{{>licenseInfo}}

#pragma once

#include "CoreMinimal.h"
#include "{{modelNamePrefix}}BaseModel.h"

class {{dllapi}} F{{classname}}
{
public:
	F{{classname}}();
	~F{{classname}}();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see F{{unrealModuleName}}Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: F{{unrealModuleName}}Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	{{#operations}}{{#operation}}class {{operationIdCamelCase}}Request;
	class {{operationIdCamelCase}}Response;
	{{/operation}}{{/operations}}
	{{#operations}}{{#operation}}DECLARE_DELEGATE_OneParam(F{{operationIdCamelCase}}Delegate, const {{operationIdCamelCase}}Response&);
	{{/operation}}{{/operations}}
	{{#operations}}{{#operation}}{{#description}}/* {{{.}}} */
	{{/description}}FHttpRequestPtr {{operationIdCamelCase}}(const {{operationIdCamelCase}}Request& Request, const F{{operationIdCamelCase}}Delegate& Delegate = F{{operationIdCamelCase}}Delegate()) const;
	{{/operation}}{{/operations}}
private:
	{{#operations}}{{#operation}}void On{{operationIdCamelCase}}Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, F{{operationIdCamelCase}}Delegate Delegate) const;
	{{/operation}}{{/operations}}
	FHttpRequestRef CreateHttpRequest(const F{{unrealModuleName}}Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, F{{unrealModuleName}}Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<F{{unrealModuleName}}HttpRetryManager> DefaultRetryManager;
};