{{>licenseInfo}}

#pragma once

#include "Misc/EnumRange.h"
#include "UObject/ObjectMacros.h"

#include "{{modelNamePrefix}}BaseModel.h"

#include "{{classname}}.h"
{{#imports}}{{{import}}}
{{/imports}}
{{#operations}}
{{#operation}}
{{#allParams}}
{{#isEnum}}
{{#allowableValues}}

UENUM(BlueprintType)
enum class E{{classname}}_{{operationIdCamelCase}}Request_{{paramName}} : uint8
{
	{{#enumVars}}
	{{name}} UMETA(DisplayName = "{{value}}"),
	{{/enumVars}}
	MAX
};

ENUM_RANGE_BY_COUNT(E{{classname}}_{{operationIdCamelCase}}Request_{{paramName}}, E{{classname}}_{{operationIdCamelCase}}Request_{{paramName}}::MAX);
{{/allowableValues}}
{{/isEnum}}
{{/allParams}}

/* F{{classname}}::F{{operationIdCamelCase}}Request
{{#notes}} *
 * {{.}}
{{/notes}} */
class {{dllapi}} F{{classname}}::F{{operationIdCamelCase}}Request : public F{{unrealModuleName}}Request
{
public:
	virtual ~F{{operationIdCamelCase}}Request() override;

	virtual void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override final;
	virtual FString ComputePath() const override final;

public:{{#allParams}}{{#isEnum}}
	{{#description}}/* {{{.}}} */
	{{/description}}{{^required}}TOptional<{{/required}}E{{classname}}_{{operationIdCamelCase}}Request_{{paramName}}{{^required}}>{{/required}} {{paramName}}{{#required}}{{#defaultValue}} = {{{.}}}{{/defaultValue}}{{/required}};
	{{/isEnum}}
	{{^isEnum}}

	{{#description}}/* {{{.}}} */
	{{/description}}{{^required}}TOptional<{{/required}}{{^isContainer}}{{^isPrimitiveType}}F{{/isPrimitiveType}}{{dataType}}{{^required}}>{{/required}}{{/isContainer}}{{#isContainer}}{{#content}}{{#application/json}}{{#schema}}{{baseType}}{{#isPrimitiveType}}<{{/isPrimitiveType}}{{^isPrimitiveType}}<F{{/isPrimitiveType}}{{/schema}}{{/application/json}}{{/content}}{{^content}}{{#schema}}{{baseType}}{{#isPrimitiveType}}<{{/isPrimitiveType}}{{^isPrimitiveType}}<F{{/isPrimitiveType}}{{/schema}}{{/content}}{{complexType}}>{{^required}}>{{/required}}{{/isContainer}} {{paramName}}{{#required}}{{#defaultValue}} = {{{.}}}{{/defaultValue}}{{/required}};
	{{/isEnum}}
	{{/allParams}}
};

class {{dllapi}} F{{classname}}::F{{operationIdCamelCase}}Response : public F{{unrealModuleName}}Response
{
public:
	virtual ~F{{operationIdCamelCase}}Response() override;
	{{#responses.0}}

	virtual void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override final;
	{{/responses.0}}
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

public:
	{{#returnProperty}}{{#isContainer}}{{baseType}}<{{^isPrimitiveType}}F{{/isPrimitiveType}}{{complexType}}>{{/isContainer}}{{^isContainer}}{{^isPrimitiveType}}F{{/isPrimitiveType}}{{baseType}}{{/isContainer}} Content;{{/returnProperty}}
};{{^-last}}
{{/-last}}{{/operation}}{{/operations}}