{{>licenseInfo}}

#pragma once

#include "{{modelNamePrefix}}BaseModel.h"
#include "{{classname}}.h"

{{#imports}}{{{import}}}
{{/imports}}

{{#operations}}
{{#operation}}
/* {{summary}}
{{#notes}} *
 * {{.}}{{/notes}}
*/
class {{dllapi}} F{{classname}}::{{operationIdCamelCase}}Request : public F{{unrealModuleName}}Request
{
public:
	virtual ~{{operationIdCamelCase}}Request() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	{{#allParams}}
	{{#isEnum}}
	{{#allowableValues}}
	enum class {{{enumName}}}
	{
		{{#enumVars}}
		{{name}},
		{{/enumVars}}
	};
	{{/allowableValues}}

	static FString EnumToString(const {{{enumName}}}& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, {{{enumName}}}& EnumValue);
	{{#description}}/* {{{.}}} */
	{{/description}}{{^required}}TOptional<{{/required}}{{{datatypeWithEnum}}}{{^required}}>{{/required}} {{paramName}}{{#required}}{{#defaultValue}} = {{{.}}}{{/defaultValue}}{{/required}};
	{{/isEnum}}
	{{^isEnum}}
	{{#description}}/* {{{.}}} */
	{{/description}}{{^required}}TOptional<{{/required}}{{^isContainer}}{{^isPrimitiveType}}F{{/isPrimitiveType}}{{dataType}}{{^required}}>{{/required}}{{/isContainer}}{{#isContainer}}{{#content}}{{#application/json}}{{#schema}}{{baseType}}{{#isPrimitiveType}}<{{/isPrimitiveType}}{{^isPrimitiveType}}<F{{/isPrimitiveType}}{{/schema}}{{/application/json}}{{/content}}{{^content}}{{#schema}}{{baseType}}{{#isPrimitiveType}}<{{/isPrimitiveType}}{{^isPrimitiveType}}<F{{/isPrimitiveType}}{{/schema}}{{/content}}{{complexType}}>{{^required}}>{{/required}}{{/isContainer}} {{paramName}}{{#required}}{{#defaultValue}} = {{{.}}}{{/defaultValue}}{{/required}};
	{{/isEnum}}
	{{/allParams}}
};

class {{dllapi}} F{{classname}}::{{operationIdCamelCase}}Response : public F{{unrealModuleName}}Response
{
public:
	virtual ~{{operationIdCamelCase}}Response() {}
	{{#responses.0}}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	{{/responses.0}}
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

	{{#returnProperty}}{{#isContainer}}{{baseType}}<{{^isPrimitiveType}}F{{/isPrimitiveType}}{{complexType}}>{{/isContainer}}{{^isContainer}}{{^isPrimitiveType}}F{{/isPrimitiveType}}{{baseType}}{{/isContainer}} Content;{{/returnProperty}}
};

{{/operation}}
{{/operations}}