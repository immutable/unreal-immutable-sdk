{{>licenseInfo}}

#include "{{modelNamePrefix}}BaseModel.h"

bool F{{unrealModuleName}}HttpRetryManager::Tick(float DeltaTime)
{
	FManager::Update();
	return true;
}

F{{unrealModuleName}}HttpRetryParams::F{{unrealModuleName}}HttpRetryParams
(
	const FRetryLimitCountSetting& InRetryLimitCountOverride /*= FRetryLimitCountSetting()*/,
	const FRetryTimeoutRelativeSecondsSetting& InRetryTimeoutRelativeSecondsOverride /*= FRetryTimeoutRelativeSecondsSetting()*/,
	const FRetryResponseCodes& InRetryResponseCodes /*= FRetryResponseCodes()*/,
	const FRetryVerbs& InRetryVerbs /*= FRetryVerbs()*/,
	const FRetryDomainsPtr& InRetryDomains /*= FRetryDomainsPtr() */
)
	: RetryLimitCountOverride(InRetryLimitCountOverride)
	, RetryTimeoutRelativeSecondsOverride(InRetryTimeoutRelativeSecondsOverride)
	, RetryResponseCodes(InRetryResponseCodes)
	, RetryVerbs(InRetryVerbs)
	, RetryDomains(InRetryDomains)
{
}

void F{{unrealModuleName}}Response::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	ResponseCode = InHttpResponseCode;
	SetSuccessful(EHttpResponseCodes::IsOk(InHttpResponseCode));
	if(InHttpResponseCode == EHttpResponseCodes::RequestTimeout)
	{
		SetResponseString(TEXT("Request Timeout"));
	}
}